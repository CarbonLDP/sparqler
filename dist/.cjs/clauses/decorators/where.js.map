{"version":3,"sources":["clauses/decorators/where.ts"],"names":[],"mappings":";;AACA,4CAA2C;AAC3C,uBAAoC;AAOpC,uDAAsD;AACtD,6CAG0B;AAC1B,kDAAgD;AAEhD,mDAAwD;AASxD,kBAAoD,QAAsC;IACzF,IAAM,MAAM,IAAa,cAAK,SAAK,yBAAc,CAAE,QAAQ,CAAE,CAAE,CAAC;IAEhE,IAAM,SAAS,GAA8B,IAAI,qBAAS,CAAmB,IAAI,EAAE,MAAM,CAAE,CAAC;IAC5F,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAE,SAAS,EAAE,iBAAc,CAAE,SAAS,EAAE,EAAE,CAAE,CAAE,CAAC;AAC5E,CAAC;AAcD,eAA2D,eAA4E;IACtI,IAAM,WAAW,GAAe,IAAI,yBAAW,CAAE,IAAI,CAAC,YAAY,CAAE,CAAC;IACrE,IAAM,QAAQ,GAAiC,eAAe,CAAE,IAAI,yBAAc,CAAE,WAAW,CAAE,CAAE,CAAC;IAEpG,IAAM,MAAM,IAAa,cAAK,SAAK,yBAAc,CAAE,QAAQ,CAAE,CAAE,CAAC;IAChE,IAAM,SAAS,GAAgB,IAAI,qBAAS,CAAK,IAAI,EAAE,MAAM,EAAE,WAAW,CAAE,CAAC;IAE7E,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAE,SAAS,EAAE,iBAAc,CAAE,SAAS,EAAE,EAAE,CAAE,CAAE,CAAC;AAC5E,CAAC;AAUD,wBAA0E,SAAsB,EAAE,MAAQ;IACzG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;QAC7B,KAAK,EAAE,KAAK,CAAC,IAAI,CAAE,SAAS,CAAE;KAC9B,CAAE,CAAC;AACL,CAAC;AAJD,wCAIC;AAUD,2BAAgF,SAAsB,EAAE,MAAQ;IAC/G,MAAM,CAAC,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;QAC7B,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAE,SAAS,CAAE;KACjC,CAAE,CAAC;AACL,CAAC;AAJD,8CAIC","file":"where.js","sourcesContent":["import { SubFinishClause } from \"./..\";\nimport { Container } from \"./../Container\";\nimport { groupDecorator } from \"./\";\nimport {\n\tFinishClause,\n\tGroupClause,\n\tSubWhereClause,\n\tWhereClause,\n} from \"./../interfaces\";\nimport { IRIResolver } from \"./../../iri/IRIResolver\";\nimport {\n\tGraphPattern,\n\tPatternBuilder,\n} from \"./../../patterns\";\nimport { WHERE } from \"./../../patterns/tokens\";\nimport { Token } from \"./../../tokens\";\nimport { getBlockTokens } from \"./../../utils/Patterns\";\n\n/**\n * Sets the graph patterns the sub-query should match to retrieve the\n * sub-solutions data.\n *\n * @param patterns Patterns the sub-query should match.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction subWhere( this:Container<SubFinishClause>, patterns:GraphPattern | GraphPattern[] ):GroupClause<SubFinishClause> & SubFinishClause {\n\tconst tokens:Token[] = [ WHERE, ...getBlockTokens( patterns ) ];\n\n\tconst container:Container<SubFinishClause> = new Container<SubFinishClause>( this, tokens );\n\treturn this._finishDecorator( container, groupDecorator( container, {} ) );\n}\n\n/**\n * Specifies the graph patterns the query should match to retrieve\n * the solutions results.\n *\n * This pattern are created by a pattern constructor function that\n * receives a {@link PatternBuilder} which is a class that exposes\n * the possible elements and configurations the patterns chan have.\n *\n * @param patternFunction Function that retrieves a pattern or an\n * array of patterns to match.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction where<T extends FinishClause>( this:Container<T>, patternFunction:( builder:PatternBuilder ) => GraphPattern | GraphPattern[ ] ):GroupClause<T> & T {\n\tconst iriResolver:IRIResolver = new IRIResolver( this._iriResolver );\n\tconst patterns:GraphPattern | GraphPattern[] = patternFunction( new PatternBuilder( iriResolver ) );\n\n\tconst tokens:Token[] = [ WHERE, ...getBlockTokens( patterns ) ];\n\tconst container:Container<T> = new Container<T>( this, tokens, iriResolver );\n\n\treturn this._finishDecorator( container, groupDecorator( container, {} ) );\n}\n\n/**\n * Decorator that binds the {@link WhereClause} methods to a container\n * and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function whereDecorator<T extends FinishClause, W extends object>( container:Container<T>, object:W ):W & WhereClause<T> {\n\treturn Object.assign( object, {\n\t\twhere: where.bind( container ),\n\t} );\n}\n\n/**\n * Decorator that binds the {@link SubWhereClause} clause pattern\n * methods to a container and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function subWhereDecorator<T extends SubFinishClause, W extends object>( container:Container<T>, object:W ):W & SubWhereClause {\n\treturn Object.assign( object, {\n\t\twhere: subWhere.bind( container ),\n\t} );\n}\n"],"sourceRoot":"../../../src"}