{"version":3,"sources":["tokens/ConstructToken.ts"],"names":[],"mappings":";;AAMA,iCAAuC;AAEvC;IAMC;QALS,UAAK,GAAe,WAAW,CAAC;QAMxC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,kCAAS,GAAT;QAAW,gBAAuB;aAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;YAAvB,2BAAuB;;QACjC,CAAA,KAAA,IAAI,CAAC,OAAO,CAAA,CAAC,IAAI,WAAK,MAAM,EAAG;QAC/B,MAAM,CAAC,IAAI,CAAC;;IACb,CAAC;IAED,mCAAU,GAAV;QAAY,kBAA0B;aAA1B,UAA0B,EAA1B,qBAA0B,EAA1B,IAA0B;YAA1B,6BAA0B;;QACrC,CAAA,KAAA,IAAI,CAAC,QAAQ,CAAA,CAAC,IAAI,WAAK,QAAQ,EAAG;QAClC,MAAM,CAAC,IAAI,CAAC;;IACb,CAAC;IAED,oCAAW,GAAX;QAAa,mBAA+B;aAA/B,UAA+B,EAA/B,qBAA+B,EAA/B,IAA+B;YAA/B,8BAA+B;;QAC3C,CAAA,KAAA,IAAI,CAAC,SAAS,CAAA,CAAC,IAAI,WAAK,SAAS,EAAG;QACpC,MAAM,CAAC,IAAI,CAAC;;IACb,CAAC;IAED,iCAAQ,GAAR;QACC,IAAI,KAAK,GAAU,iBAAgB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAE,mBAAgB,oBAAY,CAAE,IAAI,CAAC,QAAQ,CAAE,OAAK,CAAC;QAC/G,EAAE,CAAA,CAAE,IAAI,CAAC,SAAS,CAAC,MAAO,CAAC;YAAC,KAAK,IAAI,MAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,GAAG,CAAK,CAAC;QAExE,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IACF,qBAAC;AAAD,CAjCA,AAiCC,IAAA;AAjCY,wCAAc","file":"ConstructToken.js","sourcesContent":["import {\n\tPatternToken,\n\tSolutionModifier,\n\tTripleToken,\n} from \"./\";\nimport { TokenNode } from \"./TokenNode\";\nimport { joinPatterns } from \"./utils\";\n\nexport class ConstructToken implements TokenNode {\n\treadonly token:\"construct\" = \"construct\";\n\treadonly triples:TripleToken[];\n\treadonly patterns:PatternToken[];\n\treadonly modifiers:SolutionModifier[];\n\n\tconstructor() {\n\t\tthis.triples = [];\n\t\tthis.patterns = [];\n\t\tthis.modifiers = [];\n\t}\n\n\taddTriple( ...triple:TripleToken[] ):this {\n\t\tthis.triples.push( ...triple );\n\t\treturn this;\n\t}\n\n\taddPattern( ...patterns:PatternToken[] ):this {\n\t\tthis.patterns.push( ...patterns );\n\t\treturn this;\n\t}\n\n\taddModifier( ...modifiers:SolutionModifier[] ):this {\n\t\tthis.modifiers.push( ...modifiers );\n\t\treturn this;\n\t}\n\n\ttoString():string {\n\t\tlet query:string = `CONSTRUCT { ${ this.triples.join( \". \" ) } } WHERE { ${ joinPatterns( this.patterns ) } }`;\n\t\tif( this.modifiers.length ) query += ` ${ this.modifiers.join( \" \" ) }`;\n\n\t\treturn query;\n\t}\n}\n"],"sourceRoot":"../../src"}