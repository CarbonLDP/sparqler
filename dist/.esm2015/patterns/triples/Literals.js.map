{"version":3,"sources":["patterns/triples/Literals.ts"],"names":[],"mappings":"AACA,OAAO,EACN,WAAW,EACX,WAAW,EACX,UAAU,GACV,MAAM,aAAa,CAAC;AACrB,OAAO,EACN,aAAa,GAEb,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAE,OAAO,EAAE,MAAM,6BAA6B,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,cAAwB,SAAQ,cAAc;IAInD,YAAa,QAAoB,EAAE,KAA+B;QACjE,KAAK,CAAE,QAAQ,CAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;IACzB,CAAC;CAED;AAED,MAAM,iBAAkB,SAAQ,OAAO;IAItC,YAAa,QAAoB,EAAE,KAAY;QAC9C,KAAK,CAAE,QAAQ,EAAE,KAAK,CAAE,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,CAAE,UAAU,EAAE,IAAI,aAAa,CAAE,KAAK,CAAE,EAAE,WAAW,CAAE,CAAC;IAC9E,CAAC;IAED,MAAM,CAAE,IAAW;QAClB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAE,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAAA,CAAC;IAEF,YAAY,CAAE,QAAe;QAC5B,IAAI,CAAC,aAAa,GAAG,CAAE,UAAU,EAAE,IAAI,aAAa,CAAE,IAAI,CAAC,KAAK,CAAE,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,aAAa,CAAE,QAAQ,CAAE,CAAE,CAAC;QAC9H,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAAA,CAAC;CAEF;AAED,MAAM,qBAAsB,SAAQ,OAAO;IAI1C,YAAa,QAAoB,EAAE,KAAY;QAC9C,KAAK,CAAE,QAAQ,EAAE,KAAK,CAAE,CAAC;QAEzB,IAAI,IAAI,GAAU,MAAM,CAAC,SAAS,CAAE,KAAK,CAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;QAClE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAE,CAAC;IAClD,CAAC;CAED;AAED,MAAM,qBAAsB,SAAQ,OAAO;IAI1C,YAAa,QAAoB,EAAE,KAAa;QAC/C,KAAK,CAAE,QAAQ,EAAE,KAAK,CAAE,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAE,CAAC;IACvD,CAAC;CAED","file":"Literals.js","sourcesContent":["import { IRIResolver } from \"./../../iri/IRIResolver\";\nimport {\n\tCLOSE_QUOTE,\n\tLANG_SYMBOL,\n\tOPEN_QUOTE,\n} from \"./../tokens\";\nimport {\n\tStringLiteral,\n\tToken,\n} from \"./../../tokens\";\nimport { addType } from \"./../../utils/ObjectPattern\";\nimport { TriplesSubject } from \"./TriplesSubject\";\n\nexport abstract class Literal extends TriplesSubject {\n\n\tprotected value:string;\n\n\tconstructor( resolver:IRIResolver, value:string | number | boolean ) {\n\t\tsuper( resolver );\n\t\tthis.value = value + \"\";\n\t}\n\n}\n\nexport class RDFLiteral extends Literal {\n\n\tprotected elementTokens:Token[];\n\n\tconstructor( resolver:IRIResolver, value:string ) {\n\t\tsuper( resolver, value );\n\t\tthis.elementTokens = [ OPEN_QUOTE, new StringLiteral( value ), CLOSE_QUOTE ];\n\t}\n\n\tofType( type:string ):Literal {\n\t\tthis.elementTokens = addType( this.value, type );\n\t\treturn this;\n\t};\n\n\twithLanguage( language:string ):Literal {\n\t\tthis.elementTokens = [ OPEN_QUOTE, new StringLiteral( this.value ), CLOSE_QUOTE, LANG_SYMBOL, new StringLiteral( language ) ];\n\t\treturn this;\n\t};\n\n}\n\nexport class NumericLiteral extends Literal {\n\n\tprotected elementTokens:Token[];\n\n\tconstructor( resolver:IRIResolver, value:number ) {\n\t\tsuper( resolver, value );\n\n\t\tlet type:string = Number.isInteger( value ) ? \"integer\" : \"float\";\n\t\tthis.elementTokens = addType( this.value, type );\n\t}\n\n}\n\nexport class BooleanLiteral extends Literal {\n\n\tprotected elementTokens:Token[];\n\n\tconstructor( resolver:IRIResolver, value:boolean ) {\n\t\tsuper( resolver, value );\n\t\tthis.elementTokens = addType( this.value, \"boolean\" );\n\t}\n\n}\n"],"sourceRoot":"../../../src"}