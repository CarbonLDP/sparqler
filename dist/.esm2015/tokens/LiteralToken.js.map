{"version":3,"sources":["tokens/LiteralToken.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAEtC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAG5C,MAAM;IAML,YAAa,KAAgC;QALpC,UAAK,GAAa,SAAS,CAAC;QAMpC,EAAE,CAAA,CAAE,KAAK,KAAK,KAAK,CAAE,CAAC;YAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;IACxB,CAAC;IAED,QAAQ,CAAE,KAA+B;QACxC,EAAE,CAAA,CAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,KAAM,CAAC;YAAC,MAAM,CAAC;QAEtD,IAAI,CAAC,KAAK,GAAG,OAAQ,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,YAAY,CAAE,KAAK,CAAE,CAAC,CAAC;YACrE,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,WAAW,CAAE,KAAK,CAAE,CAAC,CAAC;gBACrD,IAAI,WAAW,CAAE,KAAK,CAAE,CAAC;QAE3B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED,OAAO,CAAE,IAA0C;QAClD,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,KAAM,CAAC;YAAC,MAAM,IAAI,KAAK,CAAE,iCAAiC,CAAE,CAAC;QACxE,EAAE,CAAA,CAAE,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,QAAS,CAAC;YAAC,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAE,GAAI,IAAI,CAAC,KAAM,EAAE,CAAE,CAAC;QAEtF,IAAI,CAAC,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC,CAAC;YAC1D,IAAI,iBAAiB,CAAE,IAAI,CAAE,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAE,IAAI,CAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAE7D,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED,WAAW,CAAE,QAAe;QAC3B,EAAE,CAAA,CAAE,CAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,QAAS,CAAC;YAAC,MAAM,IAAI,KAAK,CAAE,yCAAyC,CAAE,CAAC;QACjH,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAE,QAAQ,CAAE,CAAC;QAE9C,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED,QAAQ;QACP,EAAE,CAAA,CAAE,IAAI,CAAC,QAAS,CAAC;YAAC,MAAM,CAAC,GAAI,IAAI,CAAC,KAAM,GAAI,IAAI,CAAC,QAAS,EAAE,CAAC;QAC/D,EAAE,CAAA,CAAE,IAAI,CAAC,IAAK,CAAC;YAAC,MAAM,CAAC,GAAI,IAAI,CAAC,KAAM,KAAM,IAAI,CAAC,IAAK,EAAE,CAAC;QACzD,MAAM,CAAC,GAAI,IAAI,CAAC,KAAM,EAAE,CAAC;IAC1B,CAAC;CACD","file":"LiteralToken.js","sourcesContent":["import { isPrefixed } from \"./../iri\";\n\nimport { BooleanToken } from \"./BooleanToken\";\nimport { IRIToken } from \"./IRIToken\";\nimport { LanguageToken } from \"./LanguageToken\";\nimport { NumberToken } from \"./NumberToken\";\nimport { PrefixedNameToken } from \"./PrefixedNameToken\";\nimport { StringToken } from \"./StringToken\";\nimport { TokenNode } from \"./TokenNode\";\n\nexport class LiteralToken implements TokenNode {\n\treadonly token:\"literal\" = \"literal\";\n\tvalue?:NumberToken | BooleanToken | StringToken;\n\ttype?:IRIToken | PrefixedNameToken;\n\tlanguage?:LanguageToken;\n\n\tconstructor( value?:boolean | number | string ) {\n\t\tif( value === void 0 ) return;\n\t\tthis.setValue( value );\n\t}\n\n\tsetValue( value:boolean | number | string ):this {\n\t\tif( this.value && this.value.value === value ) return;\n\n\t\tthis.value = typeof  value === \"boolean\" ? new BooleanToken( value ) :\n\t\t\ttypeof value === \"number\" ? new NumberToken( value ) :\n\t\t\t\tnew StringToken( value );\n\n\t\treturn this;\n\t}\n\n\tsetType( type:string | IRIToken | PrefixedNameToken ):this {\n\t\tif( ! this.value ) throw new Error( \"Must set a value before a type.\" );\n\t\tif( this.value.token !== \"string\" ) this.value = new StringToken( `${ this.value }` );\n\n\t\tthis.type = typeof type === \"string\" ? isPrefixed( type ) ?\n\t\t\tnew PrefixedNameToken( type ) : new IRIToken( type ) : type;\n\n\t\treturn this;\n\t}\n\n\tsetLanguage( language:string ):this {\n\t\tif( ! this.value || this.value.token !== \"string\" ) throw new Error( \"Non-string value can't have a language.\" );\n\t\tthis.type = void 0;\n\t\tthis.language = new LanguageToken( language );\n\n\t\treturn this;\n\t}\n\n\ttoString():string {\n\t\tif( this.language ) return `${ this.value }${ this.language }`;\n\t\tif( this.type ) return `${ this.value }^^${ this.type }`;\n\t\treturn `${ this.value }`;\n\t}\n}\n"],"sourceRoot":"../../src"}