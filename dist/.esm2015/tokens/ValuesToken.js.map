{"version":3,"sources":["tokens/ValuesToken.ts"],"names":[],"mappings":"AAMA,MAAM;IAKL;QAJS,UAAK,GAAY,QAAQ,CAAC;QAKlC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,SAAS,CAAE,QAAsB,EAAE,GAAG,MAAkE;QACvG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,QAAQ,CAAE,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,MAAM,CAAE,CAAC;QAE3B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED,QAAQ;QACP,MAAM,SAAS,GAAU,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC,CAAC;YAC1G,KAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,GAAG,CAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9C,MAAM,MAAM,GAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,CAAE,CAAC,CAAC;YAC5F,IAAI,CAAC,MAAM,CAAC,GAAG,CAAE,SAAS,CAAC,EAAE,CAAC,KAAM,SAAS,CAAC,IAAI,CAAE,GAAG,CAAG,IAAI,CAAE,CAAC,CAAC,CAAC,CAAE,IAAI,CAAE,CAAC;QAE7E,MAAM,CAAC,UAAW,SAAU,MAAO,MAAM,CAAC,IAAI,CAAE,GAAG,CAAG,IAAI,CAAC;IAC5D,CAAC;CACD","file":"ValuesToken.js","sourcesContent":["import { IRIToken } from \"./IRIToken\";\nimport { LiteralToken } from \"./LiteralToken\";\nimport { PrefixedNameToken } from \"./PrefixedNameToken\";\nimport { TokenNode } from \"./TokenNode\";\nimport { VariableToken } from \"./VariableToken\";\n\nexport class ValuesToken implements TokenNode {\n\treadonly token:\"values\" = \"values\";\n\treadonly variables:VariableToken[];\n\treadonly values:( IRIToken | PrefixedNameToken | LiteralToken | \"UNDEF\" )[][];\n\n\tconstructor() {\n\t\tthis.variables = [];\n\t\tthis.values = [];\n\t}\n\n\taddValues( variable:VariableToken, ...values:( IRIToken | PrefixedNameToken | LiteralToken | \"UNDEF\" )[] ):this {\n\t\tthis.variables.push( variable );\n\t\tthis.values.push( values );\n\n\t\treturn this;\n\t}\n\n\ttoString():string {\n\t\tconst variables:string = this.variables.length ? this.variables.length === 1 ? this.variables.join( \" \" ) :\n\t\t\t`( ${ this.variables.join( \" \" ) } )` : \"()\";\n\n\t\tconst values:any[] = this.variables.length ? this.variables.length === 1 ? this.values[ 0 ] :\n\t\t\tthis.values.map( varValues => `( ${ varValues.join( \" \" ) } )` ) : [ \"()\" ];\n\n\t\treturn `VALUES ${ variables } { ${ values.join( \" \" ) } }`;\n\t}\n}\n"],"sourceRoot":"../../src"}