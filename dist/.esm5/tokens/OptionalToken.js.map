{"version":3,"sources":["tokens/OptionalToken.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AAEvC;IAIC;QAHS,UAAK,GAAc,UAAU,CAAC;QAItC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACpB,CAAC;IAED,kCAAU,GAAV;QAAY,iBAAyB;aAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;YAAzB,4BAAyB;;QACpC,CAAA,KAAA,IAAI,CAAC,QAAQ,CAAA,CAAC,IAAI,WAAK,OAAO,EAAG;QACjC,MAAM,CAAC,IAAI,CAAC;;IACb,CAAC;IAED,gCAAQ,GAAR;QACC,MAAM,CAAC,gBAAe,YAAY,CAAE,IAAI,CAAC,QAAQ,CAAE,OAAK,CAAC;IAC1D,CAAC;IACF,oBAAC;AAAD,CAhBA,AAgBC,IAAA","file":"OptionalToken.js","sourcesContent":["import { PatternToken } from \"./\";\nimport { TokenNode } from \"./TokenNode\";\nimport { joinPatterns } from \"./utils\";\n\nexport class OptionalToken implements TokenNode {\n\treadonly token:\"optional\" = \"optional\";\n\treadonly patterns:PatternToken[];\n\n\tconstructor() {\n\t\tthis.patterns = [];\n\t}\n\n\taddPattern( ...pattern:PatternToken[] ):this {\n\t\tthis.patterns.push( ...pattern );\n\t\treturn this;\n\t}\n\n\ttoString():string {\n\t\treturn `OPTIONAL { ${ joinPatterns( this.patterns ) } }`;\n\t}\n}\n"],"sourceRoot":"../../src"}