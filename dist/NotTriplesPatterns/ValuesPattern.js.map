{"version":3,"sources":["NotTriplesPatterns/ValuesPattern.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAwD;AAYxD,6CAQ4B;AAE5B,sDAAwD;AAGxD;IAAmC,iCAAiB;IASnD,uBAAa,QAAoB,EAAE,SAAoB;QAAvD,YACC,kBAAO,CAAE,eAAM,CAAE,CAAE,SAanB;QAZA,KAAI,CAAC,IAAI,EAAE,CAAC;QAEZ,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC;QAEvC,EAAE,CAAA,CAAE,KAAI,CAAC,QAAS,CAAC,CAAC,CAAC;YACpB,CAAA,KAAA,KAAI,CAAC,aAAa,CAAA,CAAC,IAAI,WAAK,SAAS,CAAE,CAAC,CAAE,CAAC,aAAa,EAAE,SAAE,0BAAiB,IAAG;QACjF,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,KAAI,CAAC,aAAa,CAAC,IAAI,CAAE,yBAAgB,CAAE,CAAC;YAC5C,SAAS,CAAC,OAAO,CAAE,UAAA,QAAQ;gBAAI,OAAA,CAAA,KAAA,KAAI,CAAC,aAAa,CAAA,CAAC,IAAI,WAAK,QAAQ,CAAC,aAAa,EAAE;;YAApD,CAAsD,CAAE,CAAC;YACxF,KAAI,CAAC,aAAa,CAAC,IAAI,CAAE,0BAAiB,EAAE,yBAAgB,CAAE,CAAC;QAChE,CAAC;;;IACF,CAAC;IAOD,2BAAG,GAAH;QAAA,iBAWC;QAXI,gBAAS;aAAT,UAAS,EAAT,qBAAS,EAAT,IAAS;YAAT,2BAAS;;QACb,EAAE,CAAA,CAAE,IAAI,CAAC,QAAS,CAAC,CAAC,CAAC;YACpB,CAAA,KAAA,IAAI,CAAC,aAAa,CAAA,CAAC,IAAI,WAAK,aAAa,CAAC,SAAS,CAAE,MAAM,CAAE,CAAC,CAAE,CAAE,EAAG;QACtE,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,aAAa,CAAC,IAAI,CAAE,yBAAgB,CAAE,CAAC;YAC5C,MAAM,CAAC,OAAO,CAAE,UAAA,KAAK;gBACpB,MAAM,CAAC,CAAA,KAAA,KAAI,CAAC,aAAa,CAAA,CAAC,IAAI,WAAK,aAAa,CAAC,SAAS,CAAE,KAAK,CAAE,EAAE;;YACtE,CAAC,CAAE,CAAC;YACJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAE,0BAAiB,CAAE,CAAC;QAC9C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;;IACnC,CAAC;IAED,kCAAU,GAAV;QACC,EAAE,CAAA,CAAE,IAAI,CAAC,QAAS,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAE,2BAAkB,CAAE,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,aAAa,CAAC,IAAI,CAAE,0BAAiB,CAAE,CAAC;QAC9C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAEO,4BAAI,GAAZ;QAAA,iBAOC;QANA,IAAI,CAAC,UAAU,GAAS;YACvB,UAAU,EAAE;gBACX,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAE,IAAI,CAAG;gBAC3B,UAAU,EAAE,cAAM,OAAA,KAAI,CAAC,UAAU,EAAE,EAAjB,CAAiB;aACnC;SACD,CAAC;IACH,CAAC;IAEF,oBAAC;AAAD,CA9DA,AA8DC,CA9DkC,qCAAiB,GA8DnD;AA9DY,sCAAa;;AAgE1B,kBAAe,aAAa,CAAC","file":"ValuesPattern.js","sourcesContent":["import { NotTriplesPattern } from \"./NotTriplesPattern\";\nimport {\n\tSingleValuesPattern,\n\tsupportedNativeTypes,\n\tSingleValuesPatternMore,\n\tIRIResolver,\n\tMultipleValuesPattern,\n\tMultipleValuesPatternMore,\n} from \"../Patterns\";\nimport { Resource } from \"../TriplesPatterns/Resource\";\nimport { Literal } from \"../TriplesPatterns/Literals\";\nimport { Undefined } from \"../PatternBuilder\";\nimport {\n\tVALUES,\n\tOPEN_SINGLE_LIST,\n\tCLOSE_SINGLE_LIST,\n\tOPEN_SINGLE_BLOCK,\n\tCLOSE_SINGLE_BLOCK,\n\tOPEN_MULTI_BLOCK,\n\tCLOSE_MULTI_BLOCK\n} from \"../Patterns/Tokens\";\nimport { Variable } from \"../TriplesPatterns/Variable\";\nimport * as ObjectPattern from \"../Utils/ObjectPattern\";\nimport { Token } from \"../Tokens/Token\";\n\nexport class ValuesPattern extends NotTriplesPattern implements SingleValuesPattern, MultipleValuesPattern {\n\n\tprivate resolver;\n\tprivate isSingle:boolean;\n\n\tprotected interfaces:{\n\t\taddPattern:( SingleValuesPatternMore | MultipleValuesPatternMore ) & NotTriplesPattern;\n\t};\n\n\tconstructor( resolver:IRIResolver, variables:Variable[] ) {\n\t\tsuper( [ VALUES ] );\n\t\tthis.init();\n\n\t\tthis.resolver = resolver;\n\t\tthis.isSingle = variables.length === 1;\n\n\t\tif( this.isSingle ) {\n\t\t\tthis.patternTokens.push( ...variables[ 0 ].getSelfTokens(), OPEN_SINGLE_BLOCK );\n\t\t} else {\n\t\t\tthis.patternTokens.push( OPEN_SINGLE_LIST );\n\t\t\tvariables.forEach( variable => this.patternTokens.push( ...variable.getSelfTokens() ) );\n\t\t\tthis.patternTokens.push( CLOSE_SINGLE_LIST, OPEN_MULTI_BLOCK );\n\t\t}\n\t}\n\n\thas( value:supportedNativeTypes ):SingleValuesPatternMore & NotTriplesPattern;\n\thas( value:Resource ):SingleValuesPatternMore & NotTriplesPattern;\n\thas( value:Literal ):SingleValuesPatternMore & NotTriplesPattern;\n\thas( value:Undefined ):SingleValuesPatternMore & NotTriplesPattern;\n\thas( ...values:( supportedNativeTypes | Resource | Literal | Undefined )[] ):MultipleValuesPatternMore & NotTriplesPattern;\n\thas( ...values ):( SingleValuesPatternMore | MultipleValuesPatternMore ) & NotTriplesPattern {\n\t\tif( this.isSingle ) {\n\t\t\tthis.patternTokens.push( ...ObjectPattern.serialize( values[ 0 ] ) );\n\t\t} else {\n\t\t\tthis.patternTokens.push( OPEN_SINGLE_LIST );\n\t\t\tvalues.forEach( value => {\n\t\t\t\treturn this.patternTokens.push( ...ObjectPattern.serialize( value ) )\n\t\t\t} );\n\t\t\tthis.patternTokens.push( CLOSE_SINGLE_LIST );\n\t\t}\n\t\treturn this.interfaces.addPattern;\n\t}\n\n\tgetPattern():Token[] {\n\t\tif( this.isSingle ) {\n\t\t\tthis.patternTokens.push( CLOSE_SINGLE_BLOCK );\n\t\t} else {\n\t\t\tthis.patternTokens.push( CLOSE_MULTI_BLOCK );\n\t\t}\n\n\t\treturn this.patternTokens;\n\t}\n\n\tprivate init():void {\n\t\tthis.interfaces = <any> {\n\t\t\taddPattern: {\n\t\t\t\tand: this.has.bind( this  ),\n\t\t\t\tgetPattern: () => this.getPattern(),\n\t\t\t}\n\t\t};\n\t}\n\n}\n\nexport default ValuesPattern;"]}