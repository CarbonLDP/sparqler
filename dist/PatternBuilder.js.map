{"version":3,"sources":["PatternBuilder.ts"],"names":[],"mappings":"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","file":"PatternBuilder.js","sourcesContent":["import {\n\tGraphPattern,\n\tTriplesPatternBuilder,\n\tNotTriplesPatternBuilder,\n\tsupportedNativeTypes,\n\tSingleValuesPattern,\n\tMultipleValuesPattern,\n\tIRIResolver,\n\tTriplesNodePattern\n} from \"./Patterns\";\nimport {\n\tRDFLiteral,\n\tNumericLiteral,\n\tBooleanLiteral,\n\tLiteral\n} from \"./TriplesPatterns/Literals\";\nimport { Resource } from \"./TriplesPatterns/Resource\";\nimport { Variable } from \"./TriplesPatterns/Variable\";\nimport { BlankNode } from \"./TriplesPatterns/BlankNode\";\nimport { Collection } from \"./TriplesPatterns/Collection\";\nimport { NotTriplesPattern } from \"./NotTriplesPatterns/NotTriplesPattern\";\nimport { Token } from \"./Tokens/Token\";\nimport {\n\tGRAPH,\n\tOPTIONAL,\n\tUNION,\n\tMINUS,\n} from \"./Patterns/Tokens\";\nimport * as Utils from \"./Utils/Patterns\";\nimport { ValuesPattern } from \"./NotTriplesPatterns/ValuesPattern\";\n\nexport type Undefined = \"UNDEF\";\nexport class PatternBuilder implements TriplesPatternBuilder,\n                                       NotTriplesPatternBuilder {\n\n\tpublic static get undefined():Undefined { return \"UNDEF\" };\n\tpublic get undefined():Undefined { return PatternBuilder.undefined };\n\n\tprivate resolver:IRIResolver;\n\n\tconstructor( resolver:IRIResolver ) {\n\t\tthis.resolver = resolver;\n\t}\n\n\tresource( iri:string ):Resource {\n\t\treturn new Resource( this.resolver, iri );\n\t}\n\n\tvar( name:string ):Variable {\n\t\treturn new Variable( this.resolver, name );\n\t}\n\n\tliteral( value:string ):RDFLiteral;\n\tliteral( value:number ):NumericLiteral;\n\tliteral( value:boolean ):BooleanLiteral;\n\tliteral( value ):any {\n\t\tif( typeof value === \"string\" || value instanceof String )\n\t\t\treturn new RDFLiteral( this.resolver, value as string );\n\n\t\tif( typeof value === \"number\" || value instanceof Number )\n\t\t\treturn new NumericLiteral( this.resolver, value as number );\n\n\t\tif( typeof value === \"boolean\" || value instanceof Boolean )\n\t\t\treturn new BooleanLiteral( this.resolver, value as boolean );\n\n\t\tthrow new Error( \"InvalidArgumentError: No valid value of a literal was provided.\" );\n\t}\n\n\tcollection( ...values:(supportedNativeTypes | Resource | Variable | Literal | TriplesNodePattern)[] ):Collection {\n\t\tif( values.length === 0 ) throw Error( \"InvalidArgumentError: The collection needs at least one value.\" );\n\t\treturn new Collection( this.resolver, values );\n\t}\n\n\tblankNode():BlankNode {\n\t\treturn new BlankNode( this.resolver );\n\t}\n\n\tgraph( iri:string, pattern:GraphPattern ):NotTriplesPattern;\n\tgraph( iri:string, patterns:GraphPattern[] ):NotTriplesPattern;\n\tgraph( variable:Variable, pattern:GraphPattern ):NotTriplesPattern;\n\tgraph( variable:Variable, patterns:GraphPattern[] ):NotTriplesPattern;\n\tgraph( iriOrVariable, patterns ):NotTriplesPattern {\n\t\tlet graph:Token[] = ( typeof iriOrVariable === \"string\" )\n\t\t\t? this.resolver._resolveIRI( iriOrVariable )\n\t\t\t: iriOrVariable.getSelfTokens();\n\n\t\tlet patternTokens:Token[] = Utils.getBlockTokens( patterns );\n\t\treturn new NotTriplesPattern( [ GRAPH, ...graph, ...patternTokens ] );\n\t}\n\n\toptional( pattern:GraphPattern ):NotTriplesPattern;\n\toptional( patterns:GraphPattern[] ):NotTriplesPattern;\n\toptional( patterns ):NotTriplesPattern {\n\t\tlet patternTokens:Token[] = Utils.getBlockTokens( patterns );\n\n\t\treturn new NotTriplesPattern( [ OPTIONAL, ...patternTokens ] );\n\t}\n\n\tunion( pattern1:GraphPattern, pattern2:GraphPattern ):NotTriplesPattern;\n\tunion( pattern1:GraphPattern, patterns2:GraphPattern[] ):NotTriplesPattern;\n\tunion( patterns1:GraphPattern[], pattern2:GraphPattern ):NotTriplesPattern;\n\tunion( patterns1:GraphPattern[], patterns2:GraphPattern[] ):NotTriplesPattern;\n\tunion( patterns1, patterns2 ):NotTriplesPattern {\n\t\tlet leftPatternTokens:Token[] = Utils.getBlockTokens( patterns1 );\n\t\tlet rightPatternTokens:Token[] = Utils.getBlockTokens( patterns2 );\n\n\t\treturn new NotTriplesPattern( [ ...leftPatternTokens, UNION, ...rightPatternTokens ] );\n\t}\n\n\tminus( pattern:GraphPattern ):NotTriplesPattern;\n\tminus( firstPattern:GraphPattern, ...restPatterns:GraphPattern[] ):NotTriplesPattern;\n\tminus( ...patterns:GraphPattern[] ):NotTriplesPattern {\n\t\tlet patternTokens:Token[] = Utils.getBlockTokens( patterns );\n\n\t\treturn new NotTriplesPattern( [ MINUS, ...patternTokens ] );\n\t}\n\n\tvalues( variable:Variable ):SingleValuesPattern;\n\tvalues( ...variables:Variable[] ):MultipleValuesPattern;\n\tvalues( ...variables:Variable[] ):SingleValuesPattern | MultipleValuesPattern {\n\t\treturn new ValuesPattern( this.resolver, variables );\n\t}\n\n}\n\nexport default PatternBuilder;"]}