{"version":3,"sources":["SPARQLER.ts"],"names":[],"mappings":"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","file":"SPARQLER.js","sourcesContent":["import {\r\n\tQueryClause,\r\n\tFromClause,\r\n\tSelectClause,\r\n\tWhereClause,\r\n\tSolutionModifier,\r\n\tGroupClause,\r\n\tHavingClause,\r\n\tOrderClause,\r\n\tLimitOffsetClause,\r\n\tLimitClause,\r\n\tOffsetClause,\r\n\tFinishClause,\r\n} from \"./Clauses\";\r\nimport {\r\n\tGraphPattern,\r\n\tIRIResolver,\r\n} from \"./Patterns\";\r\nimport * as IRIUtils from \"./Utils/IRI\";\r\nimport * as PatternsUtils from \"./Utils/Patterns\";\r\nimport { PatternBuilder } from \"./PatternBuilder\";\r\nimport {\r\n\tToken,\r\n\tTokenFormat,\r\n} from \"./Tokens/Token\";\r\nimport { Identifier } from \"./Tokens/Identifier\";\r\nimport { StringLiteral } from \"./Tokens/StringLiteral\";\r\nimport { RightSymbol } from \"./Tokens/RightSymbol\";\r\nimport { NumberLiteral } from \"./Tokens/NumberLiteral\";\r\nimport {\r\n\tOPEN_IRI,\r\n\tCLOSE_IRI,\r\n\tVAR_SYMBOL,\r\n\tPREFIX_SYMBOL,\r\n\tEMPTY_SEPARATOR,\r\n\tOPEN_MULTI_BLOCK,\r\n\tCLOSE_MULTI_BLOCK,\r\n\tOPEN_MULTI_LIST,\r\n\tOPEN_MULTI_BN,\r\n\tCLOSE_MULTI_LIST,\r\n\tCLOSE_MULTI_BN,\r\n\tSAME_SUBJECT_SEPARATOR,\r\n\tSAME_PROPERTY_SEPARATOR,\r\n\tTRIPLE_SEPARATOR,\r\n} from \"./Patterns/Tokens\";\r\nimport { NewLineSymbol } from \"./Tokens/NewLineSymbol\";\r\n\r\ninterface PrefixInfo {\r\n\tiri:string;\r\n\tused:boolean;\r\n}\r\n\r\nexport class SPARQLER implements QueryClause,\r\n                                 FromClause,\r\n                                 SelectClause,\r\n                                 WhereClause,\r\n                                 GroupClause,\r\n                                 HavingClause,\r\n                                 OrderClause,\r\n                                 LimitOffsetClause,\r\n                                 FinishClause,\r\n                                 IRIResolver {\r\n\r\n\tprivate _base:string;\r\n\tprivate _vocab:string;\r\n\tprivate _prefixes:Map<string, PrefixInfo>;\r\n\r\n\tprivate _selects:Token[];\r\n\tprivate _from:Token[];\r\n\tprivate _where:Token[];\r\n\tprivate _group:Token[];\r\n\tprivate _having:Token[];\r\n\tprivate _order:Token[];\r\n\tprivate _limit:Token[];\r\n\tprivate _offset:Token[];\r\n\r\n\tprivate interfaces:{\r\n\t\tqueryClause:QueryClause;\r\n\t\tfromClause:FromClause;\r\n\t\twhereClause:WhereClause;\r\n\t\thavingClause:HavingClause;\r\n\t\tgroupClause:GroupClause;\r\n\t\torderClause:OrderClause;\r\n\t\tfinishClause:FinishClause;\r\n\t\tlimitClause:LimitClause<FinishClause>;\r\n\t\toffsetClause:OffsetClause<FinishClause>;\r\n\t};\r\n\r\n\tconstructor() {\r\n\t\tthis._prefixes = new Map<string, PrefixInfo>();\r\n\r\n\t\tthis.initInterfaces();\r\n\t}\r\n\r\n\t// Clauses related implementations\r\n\r\n\tbase( iri:string ):QueryClause {\r\n\t\tthis._base = iri;\r\n\t\treturn this.interfaces.queryClause;\r\n\t}\r\n\r\n\tvocab( iri:string ):QueryClause {\r\n\t\tthis._vocab = iri;\r\n\t\treturn this.interfaces.queryClause;\r\n\t}\r\n\r\n\tprefix( name:string, iri:string ):QueryClause {\r\n\t\tthis._prefixes.set( name, {\r\n\t\t\tiri: iri,\r\n\t\t\tused: false,\r\n\t\t} );\r\n\t\treturn this.interfaces.queryClause;\r\n\t}\r\n\r\n\tselect( ...variables:string[] ):WhereClause & FromClause {\r\n\t\tif( variables.length === 0 ) throw new Error( \"IllegalArgumentError: Need to provide al least one variable.\" );\r\n\r\n\t\tthis._selects = [ new Identifier( \"SELECT\" ) ];\r\n\t\tvariables.forEach( variable => this._selects.push( VAR_SYMBOL, new StringLiteral( variable ) ) );\r\n\r\n\t\treturn Object.assign( {}, this.interfaces.whereClause, this.interfaces.fromClause );\r\n\t}\r\n\r\n\tselectAll():WhereClause & FromClause {\r\n\t\tthis._selects = [ new Identifier( \"SELECT\" ), new RightSymbol( \"*\" ) ];\r\n\t\treturn Object.assign( {}, this.interfaces.whereClause, this.interfaces.fromClause );\r\n\t}\r\n\r\n\tfrom( iri:string ):WhereClause {\r\n\t\tthis._from = [ new Identifier( \"FROM\" ), ...this._resolveIRI( iri ) ];\r\n\t\treturn this.interfaces.whereClause;\r\n\t}\r\n\r\n\tfromNamed( iri:string ):WhereClause {\r\n\t\tthis._from = [ new Identifier( \"FROM\" ), new Identifier( \"NAMED\" ), ...this._resolveIRI( iri ) ];\r\n\t\treturn this.interfaces.whereClause;\r\n\t}\r\n\r\n\twhere( patternFunction:( builder:PatternBuilder ) => GraphPattern ):SolutionModifier & FinishClause;\r\n\twhere( patternFunction:( builder:PatternBuilder ) => GraphPattern[ ] ):SolutionModifier & FinishClause;\r\n\twhere( patternFunction ):SolutionModifier & FinishClause {\r\n\t\tlet result:GraphPattern | GraphPattern[] = patternFunction( new PatternBuilder( this ) );\r\n\t\tthis._where = [ new Identifier( \"WHERE\" ), ...PatternsUtils.getBlockTokens( result as GraphPattern[] ) ];\r\n\r\n\t\treturn Object.assign(\r\n\t\t\t{},\r\n\t\t\tthis.interfaces.groupClause,\r\n\t\t\tthis.interfaces.havingClause,\r\n\t\t\tthis.interfaces.orderClause,\r\n\t\t\tthis.interfaces.limitClause,\r\n\t\t\tthis.interfaces.offsetClause,\r\n\t\t\tthis.interfaces.finishClause,\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO: Implement group condition\r\n\tgroupBy( rawCondition:string ):HavingClause & OrderClause & LimitOffsetClause & FinishClause {\r\n\t\tthis._group = [ new Identifier( \"GROUP\" ), new Identifier( \"BY\" ), new StringLiteral( rawCondition ) ];\r\n\t\treturn Object.assign(\r\n\t\t\t{},\r\n\t\t\tthis.interfaces.havingClause,\r\n\t\t\tthis.interfaces.orderClause,\r\n\t\t\tthis.interfaces.limitClause,\r\n\t\t\tthis.interfaces.offsetClause,\r\n\t\t\tthis.interfaces.finishClause,\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO: Implement having condition\r\n\thaving( rawCondition:string ):OrderClause & LimitOffsetClause & FinishClause {\r\n\t\tthis._having = [ new Identifier( \"HAVING\" ), new StringLiteral( rawCondition ) ];\r\n\t\treturn Object.assign(\r\n\t\t\t{},\r\n\t\t\tthis.interfaces.orderClause,\r\n\t\t\tthis.interfaces.limitClause,\r\n\t\t\tthis.interfaces.offsetClause,\r\n\t\t\tthis.interfaces.finishClause,\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO: Implement order condition\r\n\torderBy( rawCondition:string ):LimitOffsetClause & FinishClause {\r\n\t\tthis._order = [ new Identifier( \"ORDER\" ), new Identifier( \"BY\" ), new StringLiteral( rawCondition ) ];\r\n\t\treturn Object.assign(\r\n\t\t\t<any> {},\r\n\t\t\tthis.interfaces.limitClause,\r\n\t\t\tthis.interfaces.offsetClause,\r\n\t\t\tthis.interfaces.finishClause,\r\n\t\t);\r\n\t}\r\n\r\n\tlimit( limit:number ):OffsetClause < FinishClause > & FinishClause {\r\n\t\tthis._limit = [ new Identifier( \"LIMIT\" ), new NumberLiteral( limit ) ];\r\n\r\n\t\tif( this._offset )\r\n\t\t\treturn <any> this.interfaces.finishClause;\r\n\t\treturn Object.assign( {}, this.interfaces.offsetClause, this.interfaces.finishClause );\r\n\t}\r\n\r\n\toffset( offset:number ):LimitClause < FinishClause > & FinishClause {\r\n\t\tthis._offset = [ new Identifier( \"OFFSET\" ), new NumberLiteral( offset ) ];\r\n\r\n\t\tif( this._limit )\r\n\t\t\treturn <any> this.interfaces.finishClause;\r\n\t\treturn Object.assign( {}, this.interfaces.limitClause, this.interfaces.finishClause );\r\n\t}\r\n\r\n\t/**\r\n\t * Construct the SPARQL query string.\r\n\t * @returns {string}\r\n\t */\r\n\tprivate constructQuery( format:TokenFormat ):string {\r\n\t\tlet tokens:Token[] = [];\r\n\r\n\t\t// Add base\r\n\t\ttokens.push( new Identifier( \"BASE\" ), OPEN_IRI, new StringLiteral( this._base ), CLOSE_IRI );\r\n\r\n\t\t// Add used prefixes\r\n\t\tthis._prefixes.forEach( ( prefixInfo:PrefixInfo, prefix:string ) => {\r\n\t\t\tif( prefixInfo.used || format === TokenFormat.PRETTY )\r\n\t\t\t\ttokens.push( new Identifier( \"PREFIX\" ), new StringLiteral( prefix + \":\" ), OPEN_IRI, new StringLiteral( prefixInfo.iri ), CLOSE_IRI );\r\n\t\t} );\r\n\r\n\t\t// Add select clause\r\n\t\ttokens.push( ...this._selects );\r\n\r\n\t\t// Add from clause\r\n\t\tif( this._from )\r\n\t\t\ttokens.push( ...this._from );\r\n\r\n\t\t// Add where clause\r\n\t\ttokens.push( ...this._where );\r\n\r\n\t\t// Add solution modifiers\r\n\t\tif( this._order )\r\n\t\t\ttokens.push( ...this._order );\r\n\t\tif( this._having )\r\n\t\t\ttokens.push( ...this._having );\r\n\t\tif( this._group )\r\n\t\t\ttokens.push( ...this._group );\r\n\t\tif( this._limit )\r\n\t\t\ttokens.push( ...this._limit );\r\n\t\tif( this._offset )\r\n\t\t\ttokens.push( ...this._offset );\r\n\r\n\t\t// Transform the tokens to a string\r\n\t\tif( format === TokenFormat.COMPACT ) {\r\n\t\t\treturn tokens.reduce( ( res, token, index ) => {\r\n\t\t\t\tlet nextToken:Token = tokens[ index + 1 ];\r\n\t\t\t\tif( nextToken === EMPTY_SEPARATOR ) nextToken = tokens[ index + 2 ];\r\n\t\t\t\treturn res + token.getTokenValue( format, nextToken );\r\n\t\t\t}, \"\" );\r\n\r\n\t\t} else if( format === TokenFormat.PRETTY ) {\r\n\t\t\tlet stack:{ token:Token, indentation:number, subject:number, property:number, spaces:number }[] = [];\r\n\t\t\tlet actual:{ token:Token, indentation:number, subject:number, property:number, spaces:number } = {\r\n\t\t\t\ttoken: null,\r\n\t\t\t\tindentation: 0,\r\n\t\t\t\tsubject: 0,\r\n\t\t\t\tproperty: 0,\r\n\t\t\t\tspaces: 0\r\n\t\t\t};\r\n\r\n\t\t\treturn tokens.reduce( ( res, token, index ) => {\r\n\t\t\t\tlet nextToken:Token = tokens[ index + 1 ];\r\n\t\t\t\tlet tokenString:string = token.getTokenValue( format, nextToken );\r\n\r\n\t\t\t\t// Record spaces occupied by t¡he tokens\r\n\t\t\t\tif( actual.spaces === 0 ) {\r\n\t\t\t\t\tactual.subject += tokenString.length;\r\n\t\t\t\t\tif( tokenString.endsWith( \" \" ) ) actual.spaces ++;\r\n\t\t\t\t} else if( actual.spaces === 1 ) {\r\n\t\t\t\t\tactual.property += tokenString.length;\r\n\t\t\t\t\tif( tokenString.endsWith( \" \" ) ) actual.spaces ++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if a new block of lines\r\n\t\t\t\tif( [ OPEN_MULTI_BLOCK as Token, OPEN_MULTI_BN, OPEN_MULTI_LIST ].indexOf( token ) !== - 1 ) {\r\n\r\n\t\t\t\t\t// Record a new state for a block of triples\r\n\t\t\t\t\tstack.push( actual );\r\n\t\t\t\t\tactual = {\r\n\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\tindentation: actual.indentation + 4,\r\n\t\t\t\t\t\tsubject: 0,\r\n\t\t\t\t\t\tproperty: 0,\r\n\t\t\t\t\t\tspaces: token === OPEN_MULTI_BLOCK ? 0 : token === OPEN_MULTI_BN ? 1 : 2,\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else if( [ CLOSE_MULTI_LIST as Token ].indexOf( token ) !== - 1 ) {\r\n\t\t\t\t\tif( ! ( nextToken instanceof NewLineSymbol ) ) {\r\n\r\n\t\t\t\t\t\t// Obtain parent state\r\n\t\t\t\t\t\tlet parent = actual;\r\n\t\t\t\t\t\twhile( [ OPEN_MULTI_BLOCK as Token, OPEN_MULTI_BN, OPEN_MULTI_LIST ].indexOf( parent.token ) === - 1 )\r\n\t\t\t\t\t\t\tparent = stack.pop();\r\n\t\t\t\t\t\tstack.push( parent );\r\n\r\n\t\t\t\t\t\t// Record a new state for properties of a collection\r\n\t\t\t\t\t\tactual = {\r\n\t\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\t\tindentation: parent.indentation + 4,\r\n\t\t\t\t\t\t\tsubject: 0,\r\n\t\t\t\t\t\t\tproperty: 0,\r\n\t\t\t\t\t\t\tspaces: 1\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if( [ SAME_SUBJECT_SEPARATOR as Token, SAME_PROPERTY_SEPARATOR, CLOSE_MULTI_LIST ].indexOf( token ) !== - 1 ) {\r\n\r\n\t\t\t\t\t// Obtain parent state\r\n\t\t\t\t\tlet parent = actual;\r\n\t\t\t\t\twhile( [ OPEN_MULTI_BLOCK as Token, OPEN_MULTI_BN, OPEN_MULTI_LIST, CLOSE_MULTI_LIST, CLOSE_MULTI_BN ].indexOf( parent.token ) === - 1 )\r\n\t\t\t\t\t\tparent = stack.pop();\r\n\t\t\t\t\tstack.push( parent );\r\n\r\n\t\t\t\t\t// Record a new state for same subject properties\r\n\t\t\t\t\tif( token === SAME_SUBJECT_SEPARATOR ) {\r\n\t\t\t\t\t\tactual = {\r\n\t\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\t\tindentation: parent.indentation + actual.subject,\r\n\t\t\t\t\t\t\tsubject: actual.subject,\r\n\t\t\t\t\t\t\tproperty: 0,\r\n\t\t\t\t\t\t\tspaces: 1\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// Record a new state for a list of objects of a property\r\n\t\t\t\t\t} else if( token === SAME_PROPERTY_SEPARATOR ) {\r\n\t\t\t\t\t\tactual = {\r\n\t\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\t\tindentation: parent.indentation + actual.subject + actual.property,\r\n\t\t\t\t\t\t\tsubject: actual.subject,\r\n\t\t\t\t\t\t\tproperty: actual.property,\r\n\t\t\t\t\t\t\tspaces: 2\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Returns still a block state\r\n\t\t\t\t} else if( token === TRIPLE_SEPARATOR ) {\r\n\t\t\t\t\twhile( actual.token !== OPEN_MULTI_BLOCK ) actual = stack.pop();\r\n\t\t\t\t\tactual.spaces = 0;\r\n\t\t\t\t\tactual.subject = 0;\r\n\t\t\t\t\tactual.property = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif( nextToken === CLOSE_MULTI_BLOCK ) {\r\n\t\t\t\t\twhile( actual.token !== OPEN_MULTI_BLOCK ) actual = stack.pop();\r\n\t\t\t\t\tactual = stack.pop();\r\n\t\t\t\t} else if( nextToken === CLOSE_MULTI_BN ) {\r\n\t\t\t\t\twhile( actual.token !== OPEN_MULTI_BN ) actual = stack.pop();\r\n\t\t\t\t\tactual = stack.pop();\r\n\t\t\t\t} else if( nextToken === CLOSE_MULTI_LIST ) {\r\n\t\t\t\t\twhile( actual.token !== OPEN_MULTI_LIST ) actual = stack.pop();\r\n\t\t\t\t\tactual = stack.pop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif( tokenString.endsWith( \"\\n\" ) ) {\r\n\t\t\t\t\ttokenString = tokenString + \" \".repeat( actual.indentation );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn res + tokenString;\r\n\t\t\t}, \"\" );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a compact SPARQL query string.\r\n\t * @returns {string}\r\n\t */\r\n\ttoCompactString():string {\r\n\t\treturn this.constructQuery( TokenFormat.COMPACT );\r\n\t}\r\n\r\n\ttoString():string {\r\n\t\treturn this.toCompactString();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a pretty SPARQL query string.\r\n\t * @returns {string}\r\n\t */\r\n\ttoPrettyString():string {\r\n\t\treturn this.constructQuery( TokenFormat.PRETTY );\r\n\t}\r\n\r\n\tprivate initInterfaces():void {\r\n\t\tthis.interfaces = {\r\n\t\t\tqueryClause: {\r\n\t\t\t\tbase: this.base.bind( this ),\r\n\t\t\t\tvocab: this.vocab.bind( this ),\r\n\t\t\t\tprefix: this.prefix.bind( this ),\r\n\t\t\t\tselect: this.select.bind( this ),\r\n\t\t\t\tselectAll: this.selectAll.bind( this ),\r\n\t\t\t},\r\n\t\t\tfromClause: {\r\n\t\t\t\tfrom: this.from.bind( this ),\r\n\t\t\t\tfromNamed: this.fromNamed.bind( this ),\r\n\t\t\t},\r\n\t\t\twhereClause: {\r\n\t\t\t\twhere: this.where.bind( this ),\r\n\t\t\t},\r\n\t\t\tgroupClause: {\r\n\t\t\t\tgroupBy: this.groupBy.bind( this ),\r\n\t\t\t},\r\n\t\t\thavingClause: {\r\n\t\t\t\thaving: this.having.bind( this ),\r\n\t\t\t},\r\n\t\t\torderClause: {\r\n\t\t\t\torderBy: this.orderBy.bind( this ),\r\n\t\t\t},\r\n\t\t\tlimitClause: {\r\n\t\t\t\tlimit: this.limit.bind( this ),\r\n\t\t\t},\r\n\t\t\toffsetClause: {\r\n\t\t\t\toffset: this.offset.bind( this ),\r\n\t\t\t},\r\n\t\t\tfinishClause: {\r\n\t\t\t\ttoCompactString: this.toCompactString.bind( this ),\r\n\t\t\t\ttoPrettyString: this.toPrettyString.bind( this ),\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\t_resolveIRI( iri:string, vocab:boolean = false ):Token[] {\r\n\t\tlet tokens:Token[];\r\n\r\n\t\tif( IRIUtils.isPrefixed( iri ) ) {\r\n\t\t\tlet parts:string[] = IRIUtils.getPrefixedParts( iri );\r\n\t\t\tif( parts === null ) return;\r\n\r\n\t\t\tlet prefixInfo:PrefixInfo = this._prefixes.get( parts[ 0 ] );\r\n\t\t\tif( prefixInfo === void 0 ) throw new Error( \"IllegalArgumentError: The used prefix has not been declared\" );\r\n\r\n\t\t\ttokens = [ new StringLiteral( parts[ 0 ] ), PREFIX_SYMBOL, new StringLiteral( parts[ 1 ] ) ];\r\n\t\t\tprefixInfo.used = true;\r\n\t\t} else {\r\n\t\t\ttokens = IRIUtils.resolve( iri, vocab ? this._vocab : void 0 );\r\n\t\t}\r\n\r\n\t\treturn tokens;\r\n\t}\r\n\r\n}\r\n\r\nexport default SPARQLER;\r\n"]}