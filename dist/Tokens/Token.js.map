{"version":3,"sources":["Tokens/Token.ts"],"names":[],"mappings":";AAAa,QAAA,eAAe,GAAU,EAAE,CAAC;AAC5B,QAAA,eAAe,GAAU,GAAG,CAAC;AAC7B,QAAA,kBAAkB,GAAU,IAAI,CAAC;AAW9C,IAAY,WAGX;AAHD,WAAY,WAAW;IACtB,iDAAM,CAAA;IACN,mDAAO,CAAA;AACR,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB;AAED;IAEC,eAAuB,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;IAAI,CAAC;IAAA,CAAC;IAEzC,6BAAa,GAAb,UAAe,MAAmB,EAAE,SAAgB;QACnD,IAAI,SAAS,GAAU,uBAAe,CAAC;QAEvC,EAAE,CAAA,CAAE,SAAS,KAAK,KAAK,CAAE,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAA,CAAE,MAAO,CAAC,CAAC,CAAC;gBACjB,KAAK,WAAW,CAAC,MAAM;oBACtB,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAE,SAAS,CAAE,CAAC;oBACjD,KAAK,CAAC;gBACP,KAAK,WAAW,CAAC,OAAO;oBACvB,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAE,SAAS,CAAE,CAAC;oBAClD,KAAK,CAAC;YACR,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IAC/B,CAAC;IAMF,YAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBqB,sBAAK;;AA2B3B,kBAAe,KAAK,CAAC","file":"Token.js","sourcesContent":["export const EMPTY_SEPARATOR:string = \"\";\r\nexport const SPACE_SEPARATOR:string = \" \";\r\nexport const NEW_LINE_SEPARATOR:string = \"\\n\";\r\n// export const TAB_SEPARATOR:string = \"    \";\r\n\r\n// let indentation:number = 0;\r\n// export function addIndentation():void {\r\n// \tNEW_LINE_SEPARATOR = \"\\n\" + TAB_SEPARATOR.repeat( ++ indentation );\r\n// }\r\n// export function removeIndentation():void {\r\n// \tNEW_LINE_SEPARATOR = \"\\n\" + TAB_SEPARATOR.repeat( -- indentation );\r\n// }\r\n\r\nexport enum TokenFormat {\r\n\tPRETTY,\r\n\tCOMPACT,\r\n}\r\n\r\nexport abstract class Token {\r\n\r\n\tconstructor( protected value:string ) {};\r\n\r\n\tgetTokenValue( format?:TokenFormat, nextToken?:Token ):string {\r\n\t\tlet separator:string = SPACE_SEPARATOR;\r\n\r\n\t\tif( nextToken !== void 0 ) {\r\n\t\t\tswitch( format ) {\r\n\t\t\t\tcase TokenFormat.PRETTY:\r\n\t\t\t\t\tseparator = this.getPrettySeparator( nextToken );\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase TokenFormat.COMPACT:\r\n\t\t\t\t\tseparator = this.getCompactSeparator( nextToken );\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.value + separator;\r\n\t}\r\n\r\n\tprotected abstract getPrettySeparator( nextToken:Token ):string;\r\n\r\n\tprotected abstract getCompactSeparator( nextToken:Token ):string;\r\n\r\n}\r\n\r\nexport default Token;"]}