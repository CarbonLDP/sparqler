{"version":3,"sources":["TriplesPatterns/TriplesPattern.ts"],"names":[],"mappings":";AAWA,sDAAwD;AAGxD,6CAG4B;AAE5B;IAYC,wBAAa,QAAoB;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAcD,4BAAG,GAAH,UAAK,qBAAuC,EAAE,aAAa;QAA3D,iBAkBC;QAjBA,IAAI,QAAQ,GAAW,CAAE,OAAO,qBAAqB,KAAK,QAAQ,IAAI,qBAAqB,YAAY,MAAM,CAAE;cAC5G,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAE,qBAA+B,EAAE,IAAI,CAAE;cAClE,qBAAqB,CAAC,aAAa,EAAE,CAAC;QAEzC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAE,aAAa,CAAE,GAAG,aAAa,GAAG,CAAE,aAAa,CAAE,CAAC;QAEnF,EAAE,CAAA,CAAE,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAE,CAAC;YAClC,QAAQ,CAAC,OAAO,CAAE,+BAAsB,CAAE,CAAC;QAC5C,CAAA,KAAA,IAAI,CAAC,aAAa,CAAA,CAAC,IAAI,WAAK,QAAQ,EAAG;QAEvC,aAAa,CAAC,OAAO,CAAE,UAAE,KAAK,EAAE,KAAK;YACpC,CAAA,KAAA,KAAI,CAAC,aAAa,CAAA,CAAC,IAAI,WAAK,aAAa,CAAC,SAAS,CAAE,KAAK,CAAE,EAAG;YAC/D,EAAE,CAAA,CAAE,KAAK,GAAG,aAAa,CAAC,MAAM,GAAG,CAAE,CAAC;gBAAC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAE,gCAAuB,CAAE,CAAC;;QAC3F,CAAC,CAAE,CAAC;QAGJ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,CAAE,CAAC;;IACtF,CAAC;IAED,sCAAa,GAAb;QACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAES,6BAAI,GAAd;QACC,IAAI,CAAC,UAAU,GAAG;YACjB,UAAU,EAAE;gBACX,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAE,IAAI,CAAE;aAC1B;SACD,CAAC;IACH,CAAC;IAAA,CAAC;IACH,qBAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DqB,wCAAc;;AA+DpC,kBAAe,cAAc,CAAC","file":"TriplesPattern.js","sourcesContent":["import {\n\tTriplesSameSubject,\n\tTriplesSameSubjectMore,\n\tsupportedNativeTypes,\n\tIRIResolver,\n\tGraphPattern,\n\tElementPattern,\n\tTriplesNodePattern\n} from \"../Patterns\";\nimport { Literal } from \"./Literals\";\nimport { Resource } from \"./Resource\";\nimport * as ObjectPattern from \"../Utils/ObjectPattern\";\nimport { Variable } from \"./Variable\";\nimport { Token } from \"../Tokens/Token\";\nimport {\n\tSAME_SUBJECT_SEPARATOR,\n\tSAME_PROPERTY_SEPARATOR\n} from \"../Patterns/Tokens\";\n\nexport abstract class TriplesPattern<T extends GraphPattern> implements TriplesSameSubject<T>, ElementPattern {\n\n\tprotected abstract elementTokens:Token[];\n\tprotected patternTokens:Token[];\n\n\tprotected interfaces:{\n\t\taddPattern:TriplesSameSubjectMore<T>;\n\t\tgraphPattern?:T\n\t};\n\n\tprivate resolver:IRIResolver;\n\n\tconstructor( resolver:IRIResolver ) {\n\t\tthis.resolver = resolver;\n\t\tthis.patternTokens = [];\n\t\tthis.init();\n\t}\n\n\thas( propertyIRI:string, value:supportedNativeTypes ):TriplesSameSubjectMore<T> & T;\n\thas( propertyIRI:string, resource:Resource ):TriplesSameSubjectMore<T> & T;\n\thas( propertyIRI:string, variable:Variable ):TriplesSameSubjectMore<T> & T;\n\thas( propertyIRI:string, literal:Literal ):TriplesSameSubjectMore<T> & T;\n\thas( propertyIRI:string, node:TriplesNodePattern ):TriplesSameSubjectMore<T> & T;\n\thas( propertyIRI:string, values:( supportedNativeTypes | Resource | Variable | Literal | TriplesNodePattern )[] ):TriplesSameSubjectMore<T> & T;\n\thas( propertyVariable:Variable, value:supportedNativeTypes ):TriplesSameSubjectMore<T> & T;\n\thas( propertyVariable:Variable, resource:Resource ):TriplesSameSubjectMore<T> & T;\n\thas( propertyVariable:Variable, variable:Variable ):TriplesSameSubjectMore<T> & T;\n\thas( propertyVariable:Variable, literal:Literal ):TriplesSameSubjectMore<T> & T;\n\thas( propertyVariable:Variable, node:TriplesNodePattern ):TriplesSameSubjectMore<T> & T;\n\thas( propertyVariable:Variable, values:( supportedNativeTypes | Resource | Variable | Literal | TriplesNodePattern )[] ):TriplesSameSubjectMore<T> & T;\n\thas( propertyIRIOrVariable:string | Variable, valueOrValues ):TriplesSameSubjectMore<T> & T {\n\t\tlet property:Token[] = ( typeof propertyIRIOrVariable === \"string\" || propertyIRIOrVariable instanceof String )\n\t\t\t? this.resolver._resolveIRI( propertyIRIOrVariable as string, true )\n\t\t\t: propertyIRIOrVariable.getSelfTokens();\n\n\t\tvalueOrValues = Array.isArray( valueOrValues ) ? valueOrValues : [ valueOrValues ];\n\n\t\tif( this.patternTokens.length > 0 )\n\t\t\tproperty.unshift( SAME_SUBJECT_SEPARATOR );\n\t\tthis.patternTokens.push( ...property );\n\n\t\tvalueOrValues.forEach( ( value, index ) => {\n\t\t\tthis.patternTokens.push( ...ObjectPattern.serialize( value ) );\n\t\t\tif( index < valueOrValues.length - 1 ) this.patternTokens.push( SAME_PROPERTY_SEPARATOR );\n\t\t} );\n\n\n\t\treturn Object.assign( {}, this.interfaces.addPattern, this.interfaces.graphPattern );\n\t}\n\n\tgetSelfTokens():Token[] {\n\t\treturn this.elementTokens;\n\t}\n\n\tprotected init():void {\n\t\tthis.interfaces = {\n\t\t\taddPattern: {\n\t\t\t\tand: this.has.bind( this ),\n\t\t\t},\n\t\t};\n\t};\n}\n\nexport default TriplesPattern;\n"]}