{"version":3,"sources":["Utils/ObjectPattern.ts"],"names":[],"mappings":";AAIA,2BAA6B;AAE7B,yDAAwD;AACxD,6CAO4B;AAC5B,oDAAmD;AAInD,mBAA2B,MAAM;IAEhC,EAAE,CAAA,CAAE,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,YAAY,MAAO,CAAC,CAAC,CAAC;QAC7D,EAAE,CAAA,CAAE,MAAM,KAAK,+BAAc,CAAC,SAAU,CAAC;YAAC,MAAM,CAAC,CAAE,cAAK,CAAE,CAAC;QAC3D,MAAM,CAAC,CAAE,mBAAU,EAAE,IAAI,6BAAa,CAAE,MAAgB,CAAE,EAAE,oBAAW,CAAE,CAAC;IAC3E,CAAC;IAED,EAAE,CAAA,CAAE,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,YAAY,MAAO,CAAC,CAAC,CAAC;QAC7D,EAAE,CAAA,CAAE,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,OAAO,EAAE,CAAG,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAE,MAAM,GAAG,EAAE,EAAE,SAAS,CAAE,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAE,MAAM,GAAG,EAAE,EAAE,OAAO,CAAE,CAAC;IAC7C,CAAC;IAED,EAAE,CAAA,CAAE,OAAO,MAAM,KAAK,SAAS,IAAI,MAAM,YAAY,OAAQ,CAAC;QAC7D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAE,MAAM,GAAG,EAAE,EAAE,SAAS,CAAE,CAAC;IAE/C,EAAE,CAAA,CAAE,MAAM,YAAY,IAAK,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAE,MAAM,CAAC,WAAW,EAAE,EAAE,UAAU,CAAE,CAAC;IAEzD,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;AAC/B,CAAC;AApBD,8BAoBC;AAED,iBAAyB,KAAY,EAAE,IAAW;IACjD,EAAE,CAAA,CAAE,IAAI,IAAI,GAAI,CAAC;QAAC,IAAI,GAAG,GAAG,CAAE,IAAI,CAAE,CAAC;IACrC,MAAM,CAAC,CAAE,mBAAU,EAAE,IAAI,6BAAa,CAAE,KAAK,CAAE,EAAE,oBAAW,EAAE,iBAAQ,EAAE,iBAAQ,EAAE,IAAI,6BAAa,CAAE,IAAI,CAAE,EAAE,kBAAS,CAAE,CAAC;AAC1H,CAAC;AAHD,0BAGC","file":"ObjectPattern.js","sourcesContent":["import {\n\tsupportedNativeTypes,\n\tElementPattern\n} from \"../Patterns\";\nimport * as XSD from \"./XSD\";\nimport { Token } from \"../Tokens/Token\";\nimport { StringLiteral } from \"../Tokens/StringLiteral\";\nimport {\n\tOPEN_QUOTE,\n\tCLOSE_QUOTE,\n\tCLOSE_IRI,\n\tOPEN_IRI,\n\tOFF_TYPE,\n\tUNDEF\n} from \"../Patterns/Tokens\";\nimport { PatternBuilder } from \"../PatternBuilder\";\n\nexport function serialize( object:supportedNativeTypes ):Token[];\nexport function serialize( object:ElementPattern ):Token[];\nexport function serialize( object ):Token[] {\n\n\tif( typeof object === \"string\" || object instanceof String ) {\n\t\tif( object === PatternBuilder.undefined ) return [ UNDEF ];\n\t\treturn [ OPEN_QUOTE, new StringLiteral( object as string ), CLOSE_QUOTE ];\n\t}\n\n\tif( typeof object === \"number\" || object instanceof Number ) {\n\t\tif( Number.isInteger( object.valueOf() ) )\n\t\t\treturn this.addType( object + \"\", \"integer\" );\n\t\treturn this.addType( object + \"\", \"float\" );\n\t}\n\n\tif( typeof object === \"boolean\" || object instanceof Boolean )\n\t\treturn this.addType( object + \"\", \"boolean\" );\n\n\tif( object instanceof Date )\n\t\treturn this.addType( object.toISOString(), \"dateTime\" );\n\n\treturn object.getSelfTokens();\n}\n\nexport function addType( value:string, type:string ):Token[] {\n\tif( type in XSD ) type = XSD[ type ];\n\treturn [ OPEN_QUOTE, new StringLiteral( value ), CLOSE_QUOTE, OFF_TYPE, OPEN_IRI, new StringLiteral( type ), CLOSE_IRI ];\n}\n\n"]}