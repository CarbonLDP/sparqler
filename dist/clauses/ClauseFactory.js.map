{"version":3,"sources":["clauses/ClauseFactory.ts"],"names":[],"mappings":";;AAOa,QAAA,aAAa,GAItB;IACH,UAAU,EAAV;QAAY,yBAA4C;aAA5C,UAA4C,EAA5C,qBAA4C,EAA5C,IAA4C;YAA5C,oCAA4C;;QACvD,OAAO,UAAoB,SAAyB,EAAE,MAAQ;YAC7D,OAAO,eAAe;iBACpB,MAAM,CAAE,UAAE,MAAM,EAAE,SAAS,IAAM,OAAA,SAAS,CAAE,SAAS,EAAE,MAAM,CAAE,EAA9B,CAA8B,EAAE,MAAM,CAAE,CAAC;QAC7E,CAAC,CAAC;IACH,CAAC;CACD,CAAC","file":"ClauseFactory.js","sourcesContent":["import { Container2 } from \"./Container2\";\n\n\nexport interface ClauseFactory<CONTAINER extends Container2<any>, CLAUSE extends object> extends Function {\n\t<OBJECT extends object>( container:CONTAINER, object:OBJECT ):OBJECT & CLAUSE;\n}\n\nexport const ClauseFactory:{\n\tcreateFrom<CONTAINER extends Container2<any>, CLAUSE1 extends object>( clauseFactory1:ClauseFactory<CONTAINER, CLAUSE1> ):ClauseFactory<CONTAINER, CLAUSE1>;\n\tcreateFrom<CONTAINER extends Container2<any>, CLAUSE1 extends object, CLAUSE2 extends object>( clauseFactory1:ClauseFactory<CONTAINER, CLAUSE1>, clauseFactory2:ClauseFactory<CONTAINER, CLAUSE2> ):ClauseFactory<CONTAINER, CLAUSE1 & CLAUSE2>;\n\tcreateFrom<CONTAINER extends Container2<any>, CLAUSE1 extends object, CLAUSE2 extends object, CLAUSE3 extends object>( clauseFactory1:ClauseFactory<CONTAINER, CLAUSE1>, clauseFactory2:ClauseFactory<CONTAINER, CLAUSE2>, clauseFactory3:ClauseFactory<CONTAINER, CLAUSE3> ):ClauseFactory<CONTAINER, CLAUSE1 & CLAUSE2 & CLAUSE3>;\n} = {\n\tcreateFrom( ...clauseFactories:ClauseFactory<any, any>[] ):ClauseFactory<any, any> {\n\t\treturn <W extends object>( container:Container2<any>, object:W ):W & any => {\n\t\t\treturn clauseFactories\n\t\t\t\t.reduce( ( target, factoryFn ) => factoryFn( container, target ), object );\n\t\t};\n\t}\n};\n"]}