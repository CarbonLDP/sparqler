{"version":3,"sources":["clauses/GroupClause.ts"],"names":[],"mappings":";;AAGA,mDAAkD;AAKlD,+CAA8C;AAC9C,mEAA0E;AAmB1E,sBAAkG,cAA4B,EAAE,SAAW;IAC1I,OAAO,UAAE,YAAmB;QAC3B,IAAM,KAAK,GAAc,IAAI,uBAAU,CAAE,YAAY,CAAE,CAAC;QACxD,IAAM,YAAY,GAAG,uDAA8B,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;QAExE,IAAM,YAAY,GAAmB,2BAAY,CAAC,UAAU,CAAE,cAAc,EAAE,YAAY,EAAE,EAAE,CAAE,CAAC;QACjG,OAAO,cAAc,CAAE,YAAY,EAAE,YAAY,CAAE,CAAC;IACrD,CAAC,CAAA;AACF,CAAC;AAMY,QAAA,WAAW,GAAG;IAC1B,UAAU,EAAV,UAAyG,cAA2C,EAAE,SAAW,EAAE,MAAQ;QAC1K,OAAO,2BAAY,CAAC,UAAU,CAAE,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACjF,OAAO,EAAE,YAAY,CAAE,cAAc,EAAE,SAAS,CAAE;SAClD,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"GroupClause.js","sourcesContent":["import { Container2 } from \"../data/Container2\";\nimport { Factory } from \"../data/Factory\";\n\nimport { GroupToken } from \"../tokens/GroupToken\";\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SubSelectToken } from \"../tokens/SubSelectToken\";\n\nimport { FinishClause } from \"./FinishClause\";\nimport { HavingClause } from \"./HavingClause\";\nimport { cloneSolutionModifierContainer } from \"./SolutionModifierClause\";\n\n\nexport interface GroupClause<T extends FinishClause> extends HavingClause<T> {\n\t/**\n\t * Set a condition to be divide the solutions returned by the query\n\t * into one or more groups.\n\t *\n\t * @param rawCondition Raw condition to be applied to the solutions grouping.\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\t// TODO: create group condition expressions\n\tgroupBy( rawCondition:string ):HavingClause<T> & T;\n}\n\n\n/**\n * @todo\n */\nfunction getGroupByFn<C extends Container2<QueryToken | SubSelectToken>, T extends FinishClause>( genericFactory:Factory<C, T>, container:C ):GroupClause<T>[ \"groupBy\" ] {\n\treturn ( rawCondition:string ) => {\n\t\tconst token:GroupToken = new GroupToken( rawCondition );\n\t\tconst newContainer = cloneSolutionModifierContainer( container, token );\n\n\t\tconst havingClause:HavingClause<T> = HavingClause.createFrom( genericFactory, newContainer, {} );\n\t\treturn genericFactory( newContainer, havingClause );\n\t}\n}\n\n\n/**\n * @todo\n */\nexport const GroupClause = {\n\tcreateFrom<C extends Container2<QueryToken | SubSelectToken>, T extends FinishClause, O extends object>( genericFactory:Factory<typeof container, T>, container:C, object:O ):O & GroupClause<T> {\n\t\treturn HavingClause.createFrom( genericFactory, container, Object.assign( object, {\n\t\t\tgroupBy: getGroupByFn( genericFactory, container ),\n\t\t} ) );\n\t},\n};\n"]}