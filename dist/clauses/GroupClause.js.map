{"version":3,"sources":["clauses/GroupClause.ts"],"names":[],"mappings":";;AAGA,mDAAkD;AAMlD,+CAA8C;AAC9C,mEAA0E;AA+B1E,SAAS,YAAY,CAA6F,cAA4B,EAAE,SAAW;IAC1J,OAAO,UAAE,YAAmB;QAC3B,IAAM,KAAK,GAAc,IAAI,uBAAU,CAAE,YAAY,CAAE,CAAC;QACxD,IAAM,YAAY,GAAG,uDAA8B,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;QAExE,IAAM,YAAY,GAAmB,2BAAY,CAAC,UAAU,CAAE,cAAc,EAAE,YAAY,EAAE,EAAE,CAAE,CAAC;QACjG,OAAO,cAAc,CAAE,YAAY,EAAE,YAAY,CAAE,CAAC;IACrD,CAAC,CAAA;AACF,CAAC;AAMY,QAAA,WAAW,GAgBpB;IACH,UAAU,EAAV,UAA0H,cAA2C,EAAE,SAAW,EAAE,MAAQ;QAC3L,OAAO,2BAAY,CAAC,UAAU,CAAE,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACjF,OAAO,EAAE,YAAY,CAAE,cAAc,EAAE,SAAS,CAAE;SAClD,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"GroupClause.js","sourcesContent":["import { Container } from \"../data/Container\";\nimport { Factory } from \"../data/Factory\";\n\nimport { GroupToken } from \"../tokens/GroupToken\";\nimport { QueryClauseToken } from \"../tokens/QueryClauseToken\";\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SubSelectToken } from \"../tokens/SubSelectToken\";\n\nimport { FinishClause } from \"./FinishClause\";\nimport { HavingClause } from \"./HavingClause\";\nimport { cloneSolutionModifierContainer } from \"./SolutionModifierClause\";\n\n\n/**\n * Interface with the methods available to make a GROUP BY statement.\n */\nexport interface GroupClause<T extends FinishClause> extends HavingClause<T> {\n\t/**\n\t * Set a condition to be divide the solutions returned by the query\n\t * into one or more groups.\n\t *\n\t * @param rawCondition Raw condition to be applied to the solutions grouping.\n\t *\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\t// TODO: create group condition expressions\n\tgroupBy( rawCondition:string ):HavingClause<T> & T;\n}\n\n\n/**\n * Function that creates the {@link GroupClause.groupBy} function.\n *\n * @param genericFactory The factory for the generic {@link FinishClause}\n * that the {@link GroupClause} receives.\n * @param container The container with the query data of the statement.\n *\n * @returns The {@link GroupClause.groupBy} function.\n *\n * @private\n */\nfunction getGroupByFn<C extends Container<QueryToken<QueryClauseToken>| SubSelectToken>, T extends FinishClause>( genericFactory:Factory<C, T>, container:C ):GroupClause<T>[ \"groupBy\" ] {\n\treturn ( rawCondition:string ) => {\n\t\tconst token:GroupToken = new GroupToken( rawCondition );\n\t\tconst newContainer = cloneSolutionModifierContainer( container, token );\n\n\t\tconst havingClause:HavingClause<T> = HavingClause.createFrom( genericFactory, newContainer, {} );\n\t\treturn genericFactory( newContainer, havingClause );\n\t}\n}\n\n\n/**\n * Constant with the utils for {@link GroupClause} objects.\n */\nexport const GroupClause:{\n\t/**\n\t * Factory function that allows to crete a {@link GroupClause}\n\t * from the {@param object} provided.\n\t *\n\t * @param genericFactory The factory to create the generic finish\n\t * of the {@link GroupClause} statement.\n\t * @param container The related container with the data for the\n\t * {@link GroupClause} statement.\n\t * @param object The base base from where to create the\n\t * {@link GroupClause} statement.\n\t *\n\t * @return The {@link GroupClause} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<SubSelectToken | QueryToken<QueryClauseToken>>, T extends FinishClause, O extends object>( genericFactory:Factory<typeof container, T>, container:C, object:O ):O & GroupClause<T>;\n} = {\n\tcreateFrom<C extends Container<SubSelectToken | QueryToken<QueryClauseToken>>, T extends FinishClause, O extends object>( genericFactory:Factory<typeof container, T>, container:C, object:O ):O & GroupClause<T> {\n\t\treturn HavingClause.createFrom( genericFactory, container, Object.assign( object, {\n\t\t\tgroupBy: getGroupByFn( genericFactory, container ),\n\t\t} ) );\n\t},\n};\n"]}