{"version":3,"sources":["clauses/LimitClause.ts"],"names":[],"mappings":";;AAGA,mDAAkD;AAKlD,mEAA0E;AA6B1E,SAAS,UAAU,CAAwF,cAA4B,EAAE,SAAW;IACnJ,OAAO,UAAE,KAAY;QACpB,IAAM,KAAK,GAAc,IAAI,uBAAU,CAAE,KAAK,CAAE,CAAC;QAEjD,IAAM,YAAY,GAAK,uDAA8B,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;QAC1E,OAAO,cAAc,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IAC3C,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,WAAW,GAgBpB;IACH,UAAU,YAAE,cAAc,EAAE,SAAS,EAAE,MAAM;QAC5C,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,KAAK,EAAE,UAAU,CAAE,cAAc,EAAE,SAAS,CAAE;SAC9C,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"LimitClause.js","sourcesContent":["import { Container } from \"../data/Container\";\nimport { Factory } from \"../data/Factory\";\n\nimport { LimitToken } from \"../tokens/LimitToken\";\nimport { QueryClauseToken } from \"../tokens/QueryClauseToken\";\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SubSelectToken } from \"../tokens/SubSelectToken\";\n\nimport { cloneSolutionModifierContainer } from \"./SolutionModifierClause\";\n\n\n/**\n * Interface with the methods available to make a LIMIT statement.\n */\nexport interface LimitClause<T extends object> {\n\t/**\n\t * Set the limit of results the query should return.\n\t *\n\t * @param limit The number to be applied as limit.\n\t * @returns An OffsetClause or the FinishClause/SubFinishClause depending\n\t * if the offset method has been called before or not.\n\t */\n\tlimit( limit:number ):T;\n}\n\n\n/**\n * Function that creates the {@link LimitClause.limit} function.\n *\n * @param genericFactory The factory for the generic {@link FinishClause}\n * that the {@link LimitClause} receives.\n * @param container The container with the query data of the statement.\n *\n * @returns The {@link LimitClause.limit} function.\n *\n * @private\n */\nfunction getLimitFn<C extends Container<QueryToken<QueryClauseToken> | SubSelectToken>, T extends object>( genericFactory:Factory<C, T>, container:C ):LimitClause<T>[ \"limit\" ] {\n\treturn ( limit:number ) => {\n\t\tconst token:LimitToken = new LimitToken( limit );\n\n\t\tconst newContainer:C = cloneSolutionModifierContainer( container, token );\n\t\treturn genericFactory( newContainer, {} );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link LimitClause} objects.\n */\nexport const LimitClause:{\n\t/**\n\t * Factory function that allows to crete a {@link LimitClause}\n\t * from the {@param object} provided.\n\t *\n\t * @param genericFactory The factory to create the generic finish\n\t * of the {@link LimitClause} statement.\n\t * @param container The related container with the data for the\n\t * {@link LimitClause} statement.\n\t * @param object The base base from where to create the\n\t * {@link LimitClause} statement.\n\t *\n\t * @return The {@link LimitClause} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<QueryToken<QueryClauseToken> | SubSelectToken>, T extends object, O extends object>( genericFactory:Factory<C, T>, container:C, object:O ):O & LimitClause<T>;\n} = {\n\tcreateFrom( genericFactory, container, object ) {\n\t\treturn Object.assign( object, {\n\t\t\tlimit: getLimitFn( genericFactory, container ),\n\t\t} );\n\t},\n};\n"]}