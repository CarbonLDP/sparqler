{"version":3,"sources":["clauses/LimitClause.ts"],"names":[],"mappings":";;AAAA,mDAAkD;AAMlD,mEAA0E;AAkB1E,oBAA0F,cAAkC,EAAE,SAAW;IACxI,OAAO,UAAE,KAAY;QACpB,IAAM,KAAK,GAAc,IAAI,uBAAU,CAAE,KAAK,CAAE,CAAC;QAEjD,IAAM,YAAY,GAAK,uDAA8B,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;QAC1E,OAAO,cAAc,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IAC3C,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,WAAW,GAAG;IAC1B,UAAU,EAAV,UAAmG,cAAkC,EAAE,SAAW,EAAE,MAAQ;QAC3J,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,KAAK,EAAE,UAAU,CAAE,cAAc,EAAE,SAAS,CAAE;SAC9C,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"LimitClause.js","sourcesContent":["import { LimitToken } from \"../tokens/LimitToken\";\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SubSelectToken } from \"../tokens/SubSelectToken\";\n\nimport { ClauseFactory } from \"./ClauseFactory\";\nimport { Container2 } from \"./Container2\";\nimport { cloneSolutionModifierContainer } from \"./SolutionModifierClause\";\n\n\nexport interface LimitClause<T extends object> {\n\t/**\n\t * Set the limit of results the query should return.\n\t *\n\t * @param limit The number to be applied as limit.\n\t * @returns An OffsetClause or the FinishClause/SubFinishClause depending\n\t * if the offset method has been called before or not.\n\t */\n\tlimit( limit:number ):T;\n}\n\n\n/**\n * @todo\n */\nfunction getLimitFn<C extends Container2<QueryToken | SubSelectToken>, T extends object>( genericFactory:ClauseFactory<C, T>, container:C ):LimitClause<T>[ \"limit\" ] {\n\treturn ( limit:number ) => {\n\t\tconst token:LimitToken = new LimitToken( limit );\n\n\t\tconst newContainer:C = cloneSolutionModifierContainer( container, token );\n\t\treturn genericFactory( newContainer, {} );\n\t};\n}\n\n\n/**\n * @todo\n */\nexport const LimitClause = {\n\tcreateFrom<C extends Container2<QueryToken | SubSelectToken>, T extends object, O extends object>( genericFactory:ClauseFactory<C, T>, container:C, object:O ):O & LimitClause<T> {\n\t\treturn Object.assign( object, {\n\t\t\tlimit: getLimitFn( genericFactory, container ),\n\t\t} );\n\t},\n};\n"]}