{"version":3,"sources":["clauses/LimitOffsetClause.ts"],"names":[],"mappings":";;AAKA,iDAAgD;AAGhD,6CAA4C;AAC5C,+CAA8C;AAC9C,+CAA8C;AAkC9C,0BAAwG,aAA2D;IAClK,IAAM,mBAAmB,GAA+D,2BAAY;SAClG,MAAM,CAAC,IAAI,CAAE,IAAI,EAAE,aAAa,CAAE,CAAC;IAErC,OAAO,UAAE,UAAU,EAAE,OAAO,IAAM,OAAA,yBAAW;SAC3C,MAAM,CAAE,6BAAa,CAAC,UAAU,CAAE,mBAAmB,EAAE,aAAa,CAAE,EAAE,UAAU,EAAE,OAAO,CAAE,EAD7D,CAC6D,CAAC;AACjG,CAAC;AAED,2BAAyG,aAA2D;IACnK,IAAM,kBAAkB,GAA8D,yBAAW;SAC/F,MAAM,CAAC,IAAI,CAAE,IAAI,EAAE,aAAa,CAAE,CAAC;IAErC,OAAO,UAAE,UAAU,EAAE,OAAO,IAAM,OAAA,2BAAY;SAC5C,MAAM,CAAE,6BAAa,CAAC,UAAU,CAAE,aAAa,EAAE,kBAAkB,CAAE,EAAE,UAAU,EAAE,OAAO,CAAE,EAD5D,CAC4D,CAAC;AAChG,CAAC;AAKY,QAAA,iBAAiB,GAAG;IAChC,MAAM,EAAN,UAAuH,cAAkC,EAAE,SAAW,EAAE,MAAQ;QAC/K,IAAM,aAAa,GAAqC,2BAAY;aAClE,MAAM,CAAC,IAAI,CAAE,IAAI,EAAE,cAAc,CAAE,CAAC;QAEtC,IAAM,uBAAuB,GAAG,6BAAa,CAAC,UAAU,CAAE,cAAc,EAAE,aAAa,CAAE,CAAC;QAE1F,OAAO,6BAAa,CAAC,UAAU,CAC9B,gBAAgB,CAAQ,uBAAuB,CAAE,EACjD,iBAAiB,CAAQ,uBAAuB,CAAE,EAClD,aAAa,CACb,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IACxB,CAAC;CACD,CAAC","file":"LimitOffsetClause.js","sourcesContent":["import { FinishClause } from \"./FinishClause\";\nimport { SubSelectToken } from \"./../tokens/SubSelectToken\";\nimport { GroupPatternToken } from \"../tokens/GroupPatternToken\";\nimport { QueryToken } from \"../tokens/QueryToken\";\n\nimport { ClauseFactory } from \"./ClauseFactory\";\nimport { Container2 } from \"./Container2\";\nimport { SubFinishClause } from \"./interfaces\";\nimport { LimitClause } from \"./LimitClause\";\nimport { OffsetClause } from \"./OffsetClause\";\nimport { ValuesClause } from \"./ValuesClause\";\n\n\n/**\n * This LimitOffsetClause created this way to be able to specify `limit` and `offset` in this order or viceversa,\n * but not be able to repeat `limit` or `offset` more that once.\n *\n * Example:\n *  - Correct:\n *      .limit( ... )\n *      .offset( ... )\n *      .execute();\n *\n *      .offset( ... )\n *      .limit( ... )\n *      .execute();\n *\n *      .limit( ... )\n *      .execute();\n *\n *  - Incorrect:\n *      .limit( ... )\n *      .limit( ... ) // Not possible\n *      .offset( ... )\n *\n *      .offset( ... )\n *      .limit( ... )\n *      .offset( ... ) // Not possible\n */\nexport interface LimitOffsetClause<T extends FinishClause | SubFinishClause> extends LimitClause<OffsetClause<ValuesClause<T> & T> & ValuesClause<T> & T>,\n                                                                                     OffsetClause<LimitClause<ValuesClause<T> & T> & ValuesClause<T> & T>,\n                                                                                     ValuesClause<T> {}\n\n\nfunction _getLimitFactory<CONTAINER extends Container2<any>, T extends FinishClause | SubFinishClause>( valuesFactory:ClauseFactory<CONTAINER, ValuesClause<T> & T> ):ClauseFactory<CONTAINER, LimitClause<OffsetClause<ValuesClause<T> & T> & ValuesClause<T> & T>> {\n\tconst offsetValuesFactory:ClauseFactory<CONTAINER, OffsetClause<ValuesClause<T> & T>> = OffsetClause\n\t\t.create.bind( null, valuesFactory );\n\n\treturn ( container1, object1 ) => LimitClause\n\t\t.create( ClauseFactory.createFrom( offsetValuesFactory, valuesFactory ), container1, object1 );\n}\n\nfunction _getOffsetFactory<CONTAINER extends Container2<any>, T extends FinishClause | SubFinishClause>( valuesFactory:ClauseFactory<CONTAINER, ValuesClause<T> & T> ):ClauseFactory<CONTAINER, OffsetClause<LimitClause<ValuesClause<T> & T> & ValuesClause<T> & T>> {\n\tconst limitValuesFactory:ClauseFactory<CONTAINER, LimitClause<ValuesClause<T> & T>> = LimitClause\n\t\t.create.bind( null, valuesFactory );\n\n\treturn ( container1, object1 ) => OffsetClause\n\t\t.create( ClauseFactory.createFrom( valuesFactory, limitValuesFactory ), container1, object1 );\n}\n\n/**\n * @todo\n */\nexport const LimitOffsetClause = {\n\tcreate<C extends Container2<QueryToken | SubSelectToken>, T extends FinishClause | SubFinishClause, O extends object>( genericFactory:ClauseFactory<C, T>, container:C, object:O ):O & LimitOffsetClause<T> {\n\t\tconst valuesFactory:ClauseFactory<C, ValuesClause<T>> = ValuesClause\n\t\t\t.create.bind( null, genericFactory );\n\n\t\tconst genericAndValuesFactory = ClauseFactory.createFrom( genericFactory, valuesFactory );\n\n\t\treturn ClauseFactory.createFrom(\n\t\t\t_getLimitFactory<C, T>( genericAndValuesFactory ),\n\t\t\t_getOffsetFactory<C, T>( genericAndValuesFactory ),\n\t\t\tvaluesFactory\n\t\t)( container, object );\n\t},\n};\n"]}