{"version":3,"sources":["clauses/OffsetClause.ts"],"names":[],"mappings":";;AAGA,qDAAoD;AAIpD,mEAA0E;AAkB1E,qBAA2F,cAA4B,EAAE,SAAW;IACnI,OAAO,UAAE,MAAa;QACrB,IAAM,KAAK,GAAe,IAAI,yBAAW,CAAE,MAAM,CAAE,CAAC;QAEpD,IAAM,YAAY,GAAK,uDAA8B,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;QAC1E,OAAO,cAAc,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IAC3C,CAAC,CAAC;AACH,CAAC;AAGY,QAAA,YAAY,GAAG;IAC3B,UAAU,EAAV,UAAmG,cAA4B,EAAE,SAAW,EAAE,MAAQ;QACrJ,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,MAAM,EAAE,WAAW,CAAE,cAAc,EAAE,SAAS,CAAE;SAChD,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"OffsetClause.js","sourcesContent":["import { Container2 } from \"../data/Container2\";\nimport { Factory } from \"../data/Factory\";\n\nimport { OffsetToken } from \"../tokens/OffsetToken\";\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SubSelectToken } from \"../tokens/SubSelectToken\";\n\nimport { cloneSolutionModifierContainer } from \"./SolutionModifierClause\";\n\n\nexport interface OffsetClause<T extends object> {\n\t/**\n\t * Set the offset of results the query should return from.\n\t *\n\t * @param offset The number to be applied as offset.\n\t * @returns A LimitClause or the FinishClause/SubFinishClause depending\n\t * if the limit method has been called before or not.\n\t */\n\toffset( offset:number ):T;\n}\n\n\n/**\n * @todo\n */\nfunction getOffsetFn<C extends Container2<QueryToken | SubSelectToken>, T extends object>( genericFactory:Factory<C, T>, container:C ):OffsetClause<T>[ \"offset\" ] {\n\treturn ( offset:number ) => {\n\t\tconst token:OffsetToken = new OffsetToken( offset );\n\n\t\tconst newContainer:C = cloneSolutionModifierContainer( container, token );\n\t\treturn genericFactory( newContainer, {} );\n\t};\n}\n\n\nexport const OffsetClause = {\n\tcreateFrom<C extends Container2<QueryToken | SubSelectToken>, T extends object, O extends object>( genericFactory:Factory<C, T>, container:C, object:O ):O & OffsetClause<T> {\n\t\treturn Object.assign( object, {\n\t\t\toffset: getOffsetFn( genericFactory, container ),\n\t\t} );\n\t},\n};"]}