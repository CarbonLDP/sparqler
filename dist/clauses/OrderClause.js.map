{"version":3,"sources":["clauses/OrderClause.ts"],"names":[],"mappings":";;AAGA,mDAAkD;AAMlD,yDAAwD;AACxD,mEAA0E;AAgC1E,SAAS,YAAY,CAA8F,cAA4B,EAAE,SAAW;IAC3J,OAAO,UAAE,YAAmB;QAC3B,IAAM,KAAK,GAAc,IAAI,uBAAU,CAAE,YAAY,CAAE,CAAC;QACxD,IAAM,YAAY,GAAG,uDAA8B,CAAE,SAAS,EAAE,KAAK,CAAE,CAAC;QAExE,IAAM,iBAAiB,GAAwB,qCAAiB,CAAC,UAAU,CAAE,cAAc,EAAE,YAAY,EAAE,EAAE,CAAE,CAAC;QAChH,OAAO,cAAc,CAAE,YAAY,EAAE,iBAAiB,CAAE,CAAC;IAC1D,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,WAAW,GAgBpB;IACH,UAAU,EAAV,UAA0H,cAA2C,EAAE,SAAW,EAAE,MAAQ;QAC3L,OAAO,qCAAiB,CAAC,UAAU,CAAE,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACtF,OAAO,EAAE,YAAY,CAAE,cAAc,EAAE,SAAS,CAAE;SAClD,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"OrderClause.js","sourcesContent":["import { Container } from \"../data/Container\";\nimport { Factory } from \"../data/Factory\";\n\nimport { OrderToken } from \"../tokens/OrderToken\";\nimport { QueryClauseToken } from \"../tokens/QueryClauseToken\";\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SubSelectToken } from \"../tokens/SubSelectToken\";\n\nimport { FinishClause } from \"./FinishClause\";\nimport { LimitOffsetClause } from \"./LimitOffsetClause\";\nimport { cloneSolutionModifierContainer } from \"./SolutionModifierClause\";\n\n\n/**\n * Interface with the methods available to make a ORDER BY statement.\n */\nexport interface OrderClause<T extends FinishClause> extends LimitOffsetClause<T> {\n\t/**\n\t * Set a condition to be used as the order of the sequence of solutions the\n\t * query will retrieve.\n\t *\n\t * Notice: The current version of SPARQLER does not evaluate the condition\n\t * for possible errors.\n\t *\n\t * @param rawCondition Raw condition to be applied for the solutions order.\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\t// TODO: create order condition expressions\n\torderBy( rawCondition:string ):LimitOffsetClause<T> & T;\n}\n\n/**\n * Function that creates the {@link OrderClause.orderBy} function.\n *\n * @param genericFactory The factory for the generic {@link FinishClause}\n * that the {@link OrderClause} receives.\n * @param container The container with the query data of the statement.\n *\n * @returns The {@link OrderClause.orderBy} function.\n *\n * @private\n */\nfunction getOrderByFn<C extends Container<QueryToken<QueryClauseToken> | SubSelectToken>, T extends FinishClause>( genericFactory:Factory<C, T>, container:C ):OrderClause<T>[ \"orderBy\" ] {\n\treturn ( rawCondition:string ) => {\n\t\tconst token:OrderToken = new OrderToken( rawCondition );\n\t\tconst newContainer = cloneSolutionModifierContainer( container, token );\n\n\t\tconst limitOffsetClause:LimitOffsetClause<T> = LimitOffsetClause.createFrom( genericFactory, newContainer, {} );\n\t\treturn genericFactory( newContainer, limitOffsetClause );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link OrderClause} objects.\n */\nexport const OrderClause:{\n\t/**\n\t * Factory function that allows to crete a {@link OrderClause}\n\t * from the {@param object} provided.\n\t *\n\t * @param genericFactory The factory to create the generic finish\n\t * of the {@link OrderClause} statement.\n\t * @param container The related container with the data for the\n\t * {@link OrderClause} statement.\n\t * @param object The base base from where to create the\n\t * {@link OrderClause} statement.\n\t *\n\t * @return The {@link OrderClause} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<QueryToken<QueryClauseToken> | SubSelectToken>, T extends FinishClause, O extends object>( genericFactory:Factory<typeof container, T>, container:C, object:O ):O & OrderClause<T>;\n} = {\n\tcreateFrom<C extends Container<QueryToken<QueryClauseToken> | SubSelectToken>, T extends FinishClause, O extends object>( genericFactory:Factory<typeof container, T>, container:C, object:O ):O & OrderClause<T> {\n\t\treturn LimitOffsetClause.createFrom( genericFactory, container, Object.assign( object, {\n\t\t\torderBy: getOrderByFn( genericFactory, container ),\n\t\t} ) );\n\t}\n};\n"]}