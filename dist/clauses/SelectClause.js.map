{"version":3,"sources":["clauses/SelectClause.ts"],"names":[],"mappings":";;AAAA,iDAAgD;AAEhD,uCAA6C;AAG7C,qDAAoD;AACpD,yDAAwD;AAGxD,2CAA0C;AA6E1C,qBAAgF,cAA8D,EAAE,SAAW,EAAE,QAAgC;IAC5L,OAAO;QAAE,mBAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,8BAAqB;;QAC7B,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;YAAG,MAAM,IAAI,KAAK,CAAE,wCAAwC,CAAE,CAAC;QAEtG,IAAM,WAAW,GAAe,IAAI,yBAAW,CAAE,QAAQ,CAAE,CAAC;QAC5D,WAAW,CAAC,WAAW,OAAvB,WAAW,EAAiB,SAAS,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,6BAAa,CAAE,CAAC,CAAE,EAAtC,CAAsC,CAAE,EAAG;QAE3F,IAAM,UAAU,GAA2B,oBAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,WAAW,aAAA,EAAE,CAAE,CAAC;QAClG,IAAM,YAAY,GAAuC,IAAI,uBAAU,CAAE;YACxE,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,WAAW,EAAE,UAAU;SACvB,CAAE,CAAC;QAEJ,OAAO,uBAAU,CAAC,UAAU,CAAE,cAAc,EAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IAClE,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,YAAY,GAAG;IAC3B,UAAU,EAAV,UAAwF,cAA8D,EAAE,SAAW,EAAE,MAAQ;QAC5K,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,MAAM,EAAE,WAAW,CAAE,cAAc,EAAE,SAAS,CAAE;YAChD,cAAc,EAAE,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,UAAU,CAAE;YACpE,aAAa,EAAE,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,SAAS,CAAE;YAClE,SAAS,EAAE,cAAM,OAAA,WAAW,CAAE,cAAc,EAAE,SAAS,CAAE,CAAE,GAAG,CAAE,EAA/C,CAA+C;YAChE,iBAAiB,EAAE,cAAM,OAAA,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,UAAU,CAAE,CAAE,GAAG,CAAE,EAA3D,CAA2D;YACpF,gBAAgB,EAAE,cAAM,OAAA,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,SAAS,CAAE,CAAE,GAAG,CAAE,EAA1D,CAA0D;SAClF,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"SelectClause.js","sourcesContent":["import { Container2 } from \"../data/Container2\";\nimport { Factory } from \"../data/Factory\";\nimport { cloneElement } from \"../data/utils\";\n\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SelectToken } from \"../tokens/SelectToken\";\nimport { VariableToken } from \"../tokens/VariableToken\";\n\nimport { FinishClause } from \"./FinishClause\";\nimport { FromClause } from \"./FormClause\";\n\n\n/**\n * @todo\n */\nexport interface SelectClause<T extends FinishClause> {\n\t/**\n\t * Set a list of variables to be retrieved by the query.\n\t *\n\t * @param variables The list of variables.\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselect( ...variables:string[] ):FromClause<T>;\n\n\t/**\n\t * Set a list of variables to be retrieved by the query ensuring no\n\t * repetitions in the set of solutions.\n\t *\n\t * @param variables The list of variables.\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectDistinct( ...variables:string[] ):FromClause<T>;\n\n\t/**\n\t * Set a list of variables to be retrieved by the query permitting\n\t * eliminations of non-distinct solutions, but not ensuring a set of\n\t * unique ones.\n\t *\n\t * @param variables The list of variables.\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectReduced( ...variables:string[] ):FromClause<T>;\n\n\t/**\n\t * Set that the query must return all the solutions for the variables\n\t * used in the where pattern matching.\n\t *\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectAll():FromClause<T>;\n\n\t/**\n\t * Set that the query must return all the solutions for the variables\n\t * used in the where pattern matching, ensuring there is not\n\t * duplicated solutions.\n\t *\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectAllDistinct():FromClause<T>;\n\n\t/**\n\t * Set that the query must return all the solutions for the variables\n\t * used in the where pattern matching, permitting eliminations of\n\t * non-distinct solutions, but not ensuring a set of unique ones.\n\t *\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectAllReduced():FromClause<T>;\n}\n\n\n/**\n * Function that creates a generic {@link SelectClause.select} function.\n * This function is used to create all the methods for the {@link SelectClause}\n *\n * @param genericFactory The factory for the generic {@link FinishClause}\n * that the {@link SelectClause} receives.\n * @param container The container that is bound to the FromClause methods.\n * is called from.\n * @param modifier The optional modifier of the SELECT queries.\n *\n * @returns A generic \"select\" function that shares the {@link SelectClause.select} signature.\n * It behaviour depends of the {@param modifier} set.\n *\n * @private\n */\nfunction getSelectFn<C extends Container2<QueryToken>, T extends FinishClause>( genericFactory:Factory<Container2<QueryToken<SelectToken>>, T>, container:C, modifier?:\"DISTINCT\" | \"REDUCED\" ):SelectClause<T>[ \"select\" ] {\n\treturn ( ...variables:string[] ) => {\n\t\tif( variables && variables.length === 0 ) throw new Error( \"Need to provide al least one variable.\" );\n\n\t\tconst queryClause:SelectToken = new SelectToken( modifier );\n\t\tqueryClause.addVariable( ...variables.map( x => x === \"*\" ? x : new VariableToken( x ) ) );\n\n\t\tconst queryToken:QueryToken<SelectToken> = cloneElement( container.targetToken, { queryClause } );\n\t\tconst newContainer:Container2<QueryToken<SelectToken>> = new Container2( {\n\t\t\tiriResolver: container.iriResolver,\n\t\t\ttargetToken: queryToken,\n\t\t} );\n\n\t\treturn FromClause.createFrom( genericFactory, newContainer, {} );\n\t};\n}\n\n\n/**\n * @todo\n */\nexport const SelectClause = {\n\tcreateFrom<C extends Container2<QueryToken>, T extends FinishClause, O extends object>( genericFactory:Factory<Container2<QueryToken<SelectToken>>, T>, container:C, object:O ):O & SelectClause<T> {\n\t\treturn Object.assign( object, {\n\t\t\tselect: getSelectFn( genericFactory, container ),\n\t\t\tselectDistinct: getSelectFn( genericFactory, container, \"DISTINCT\" ),\n\t\t\tselectReduced: getSelectFn( genericFactory, container, \"REDUCED\" ),\n\t\t\tselectAll: () => getSelectFn( genericFactory, container )( \"*\" ),\n\t\t\tselectAllDistinct: () => getSelectFn( genericFactory, container, \"DISTINCT\" )( \"*\" ),\n\t\t\tselectAllReduced: () => getSelectFn( genericFactory, container, \"REDUCED\" )( \"*\" ),\n\t\t} );\n\t},\n};"]}