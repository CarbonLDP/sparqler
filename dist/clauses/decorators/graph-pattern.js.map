{"version":3,"sources":["clauses/decorators/graph-pattern.ts"],"names":[],"mappings":";;AACA,gDAA0D;AAS1D;IACC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC;AAClC,CAAC;AAUD,+BAAyD,SAAiC,EAAE,MAAQ;IACnG,MAAM,CAAC,wBAAgB,CAAE,EAAE,UAAU,YAAA,EAAE,EAAE,SAAS,EAAE,MAAM,CAAE,CAAC;AAC9D,CAAC;AAFD,sDAEC","file":"graph-pattern.js","sourcesContent":["import { Container } from \"sparqler/clauses/Container\";\nimport { genericDecorator } from \"sparqler/clauses/utils\";\nimport { GraphPattern } from \"sparqler/patterns\";\nimport { Token } from \"sparqler/tokens\";\n\n/**\n * Returns the tokens of the that represent the current clause pattern.\n *\n * @returns Array of the tokens of the clause pattern.\n */\nfunction getPattern( this:Container<GraphPattern> ):Token[] {\n\treturn [].concat( this._tokens );\n}\n\n/**\n * Decorator that bind the {@link GraphPattern} methods to a container\n * and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function graphPatternDecorator<W extends object>( container:Container<GraphPattern>, object:W ):W & GraphPattern {\n\treturn genericDecorator( { getPattern }, container, object );\n}\n"]}