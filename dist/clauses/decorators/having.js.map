{"version":3,"sources":["clauses/decorators/having.ts"],"names":[],"mappings":";;AAAA,wDAAuD;AACvD,0DAA6D;AAM7D,gDAA0D;AAE1D,mDAAkD;AAClD,0CAGyB;AAYzB,gBAA2E,YAAmB;IAC7F,IAAM,MAAM,GAAW,CAAE,eAAM,EAAE,IAAI,sBAAa,CAAE,YAAY,CAAE,CAAE,CAAC;IAErE,IAAM,SAAS,GAAgB,IAAI,qBAAS,CAAK,IAAI,EAAE,MAAM,CAAE,CAAC;IAChE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAkB,SAAS,EAAE,2BAAc,CAAS,SAAS,EAAE,EAAE,CAAE,CAAE,CAAC;AACnG,CAAC;AAUD,yBAA0F,SAAsB,EAAE,MAAQ;IACzH,MAAM,CAAC,wBAAgB,CAAE,EAAE,MAAM,QAAA,EAAE,EAAE,SAAS,EAAE,2BAAc,CAAQ,SAAS,EAAE,MAAM,CAAE,CAAE,CAAC;AAC7F,CAAC;AAFD,0CAEC","file":"having.js","sourcesContent":["import { Container } from \"sparqler/clauses/Container\";\nimport { orderDecorator } from \"sparqler/clauses/decorators\";\nimport {\n\tFinishClause,\n\tHavingClause,\n\tOrderClause,\n} from \"sparqler/clauses/interfaces\";\nimport { genericDecorator } from \"sparqler/clauses/utils\";\nimport { GraphPattern } from \"sparqler/patterns\";\nimport { HAVING } from \"sparqler/patterns/tokens\";\nimport {\n\tStringLiteral,\n\tToken,\n} from \"sparqler/tokens\";\n\n/**\n * Set a condition to filter the sequence of solutions the query will\n * retrieve.\n *\n * Notice: The current version of SPARQLER does not evaluate the condition\n * for possible errors\n *\n * @param rawCondition Raw condition to be applied for the solutions filtering.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction having<T extends FinishClause | GraphPattern>( this:Container<T>, rawCondition:string ):OrderClause<T> & T {\n\tconst tokens:Token[] = [ HAVING, new StringLiteral( rawCondition ) ];\n\n\tconst container:Container<T> = new Container<T>( this, tokens );\n\treturn this._finishDecorator<OrderClause<T>>( container, orderDecorator<T, {}>( container, {} ) );\n}\n\n/**\n * Decorator that binds the HavingClause methods to a container and adds them\n * to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function havingDecorator<T extends FinishClause | GraphPattern, W extends object>( container:Container<T>, object:W ):W & HavingClause<T> {\n\treturn genericDecorator( { having }, container, orderDecorator<T, W>( container, object ) );\n}\n"]}