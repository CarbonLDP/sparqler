{"version":3,"sources":["clauses/decorators/having.ts"],"names":[],"mappings":";;AAAA,4CAM0B;AAC1B,0DAA6D;AAE7D,mDAAkD;AAClD,0CAGyB;AAGzB,gBAA2E,YAAmB;IAC7F,IAAM,MAAM,GAAW,CAAE,eAAM,EAAE,IAAI,sBAAa,CAAE,YAAY,CAAE,CAAE,CAAC;IAErE,IAAM,SAAS,GAAgB,IAAI,mBAAS,CAAK,IAAI,EAAE,MAAM,CAAE,CAAC;IAChE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAkB,SAAS,EAAE,2BAAc,CAAS,SAAS,EAAE,EAAE,CAAE,CAAE,CAAC;AACnG,CAAC;AAED,yBAA0F,SAAsB,EAAE,MAAQ;IACzH,MAAM,CAAC,0BAAgB,CAAE,EAAE,MAAM,QAAA,EAAE,EAAE,SAAS,EAAE,2BAAc,CAAQ,SAAS,EAAE,MAAM,CAAE,CAAE,CAAC;AAC7F,CAAC;AAFD,0CAEC","file":"having.js","sourcesContent":["import {\n\tContainer,\n\tFinishClause,\n\tgenericDecorator,\n\tHavingClause,\n\tOrderClause,\n} from \"sparqler/clauses\";\nimport { orderDecorator } from \"sparqler/clauses/decorators\";\nimport { GraphPattern } from \"sparqler/patterns\";\nimport { HAVING } from \"sparqler/patterns/tokens\";\nimport {\n\tStringLiteral,\n\tToken,\n} from \"sparqler/tokens\";\n\n\nfunction having<T extends FinishClause | GraphPattern>( this:Container<T>, rawCondition:string ):OrderClause<T> & T {\n\tconst tokens:Token[] = [ HAVING, new StringLiteral( rawCondition ) ];\n\n\tconst container:Container<T> = new Container<T>( this, tokens );\n\treturn this._finishDecorator<OrderClause<T>>( container, orderDecorator<T, {}>( container, {} ) );\n}\n\nexport function havingDecorator<T extends FinishClause | GraphPattern, W extends object>( container:Container<T>, object:W ):W & HavingClause<T> {\n\treturn genericDecorator( { having }, container, orderDecorator<T, W>( container, object ) );\n}\n"]}