{"version":3,"sources":["clauses/decorators/order.ts"],"names":[],"mappings":";;AAAA,4CAA2C;AAC3C,uBAA0C;AAO1C,oCAA8C;AAC9C,kDAGiC;AACjC,yCAGwB;AAYxB,iBAAsF,YAAmB;IACxG,IAAM,MAAM,GAAW,CAAE,cAAK,EAAE,WAAE,EAAE,IAAI,sBAAa,CAAE,YAAY,CAAE,CAAE,CAAC;IAExE,IAAM,SAAS,GAAgB,IAAI,qBAAS,CAAK,IAAI,EAAE,MAAM,CAAE,CAAC;IAChE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAwB,SAAS,EAAE,uBAAoB,CAAS,SAAS,EAAE,EAAE,CAAE,CAAE,CAAC;AAC/G,CAAC;AALD,0BAKC;AAUD,wBAA4F,SAAsB,EAAE,MAAQ;IAC3H,MAAM,CAAC,wBAAgB,CAAE,EAAE,OAAO,SAAA,EAAE,EAAE,SAAS,EAAE,uBAAoB,CAAQ,SAAS,EAAE,MAAM,CAAE,CAAE,CAAC;AACpG,CAAC;AAFD,wCAEC","file":"order.js","sourcesContent":["import { Container } from \"./../Container\";\nimport { limitOffsetDecorator } from \"./\";\nimport {\n\tFinishClause,\n\tLimitOffsetClause,\n\tOrderClause,\n\tSubFinishClause,\n} from \"./../interfaces\";\nimport { genericDecorator } from \"./../utils\";\nimport {\n\tBY,\n\tORDER,\n} from \"./../../patterns/tokens\";\nimport {\n\tStringLiteral,\n\tToken,\n} from \"./../../tokens\";\n\n/**\n * Set a condition to be used as the order of the sequence of solutions the\n * query will retrieve.\n *\n * Notice: The current version of SPARQLER does not evaluate the condition\n * for possible errors.\n *\n * @param rawCondition Raw condition to be applied for the solutions order.\n * @returns Object with the methods to keep constructing the query.\n */\nexport function orderBy<T extends FinishClause | SubFinishClause>( this:Container<T>, rawCondition:string ):LimitOffsetClause<T> & T {\n\tconst tokens:Token[] = [ ORDER, BY, new StringLiteral( rawCondition ) ];\n\n\tconst container:Container<T> = new Container<T>( this, tokens );\n\treturn this._finishDecorator<LimitOffsetClause<T>>( container, limitOffsetDecorator<T, {}>( container, {} ) );\n}\n\n/**\n * Decorator that binds the OrderClause methods to a container and adds them\n * to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function orderDecorator<T extends FinishClause | SubFinishClause, W extends object>( container:Container<T>, object:W ):W & OrderClause<T> {\n\treturn genericDecorator( { orderBy }, container, limitOffsetDecorator<T, W>( container, object ) );\n}\n"]}