{"version":3,"sources":["clauses/decorators/select.ts"],"names":[],"mappings":";;AAAA,gDAM+B;AAC/B,uCAGsB;AACtB,0CAAyC;AASzC,kCAA4C;AAC5C,+BAAuC;AACvC,yCAAiD;AACjD,iCAA4C;AAgB5C,iBAA0C,IAAmC,EAAE,MAAc,EAAE,SAAmB;IACjH,EAAE,CAAA,CAAE,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAE,CAAC;QAAC,MAAM,IAAI,KAAK,CAAE,wCAAwC,CAAE,CAAC;IAEtG,EAAE,CAAA,CAAE,SAAU,CAAC;QAAC,SAAS,CAAC,OAAO,CAAE,UAAA,QAAQ,IAAI,OAAA,MAAM,CAAC,IAAI,CAAE,mBAAU,EAAE,IAAI,sBAAa,CAAE,QAAQ,CAAE,CAAE,EAAxD,CAAwD,CAAE,CAAC;IAE1G,IAAM,SAAS,GAAkC,IAAI,qBAAS,CAAuB,IAAI,EAAE,MAAM,CAAE,CAAC;IAEpG,EAAE,CAAA,CAAE,IAAI,CAAC,gBAAgB,KAAK,8BAAmB,CAAC;QACjD,MAAM,CAAC,yBAAiB,CAAuB,SAAuC,EAAE,EAAE,CAAE,CAAC;IAC9F,MAAM,CAAC,oBAAa,CAAS,SAAyB,EAAE,EAAE,CAAE,CAAC;AAC9D,CAAC;AAQD;IAA4D,mBAAqB;SAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;QAArB,8BAAqB;;IAChF,MAAM,CAAC,OAAO,CAAK,IAAI,EAAE,CAAE,eAAM,CAAE,EAAE,SAAS,CAAmB,CAAC;AACnE,CAAC;AASD;IAAoE,mBAAqB;SAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;QAArB,8BAAqB;;IACxF,MAAM,CAAC,OAAO,CAAK,IAAI,EAAE,CAAE,eAAM,EAAE,iBAAQ,CAAE,EAAE,SAAS,CAAmB,CAAC;AAC7E,CAAC;AAUD;IAAmE,mBAAqB;SAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;QAArB,8BAAqB;;IACvF,MAAM,CAAC,OAAO,CAAK,IAAI,EAAE,CAAE,eAAM,EAAE,gBAAO,CAAE,EAAE,SAAS,CAAmB,CAAC;AAC5E,CAAC;AAQD;IACC,MAAM,CAAC,OAAO,CAAK,IAAI,EAAE,CAAE,eAAM,EAAE,YAAG,CAAE,CAAmB,CAAC;AAC7D,CAAC;AASD;IACC,MAAM,CAAC,OAAO,CAAK,IAAI,EAAE,CAAE,eAAM,EAAE,iBAAQ,EAAE,YAAG,CAAE,CAAmB,CAAC;AACvE,CAAC;AASD;IACC,MAAM,CAAC,OAAO,CAAK,IAAI,EAAE,CAAE,eAAM,EAAE,gBAAO,EAAE,YAAG,CAAE,CAAmB,CAAC;AACtE,CAAC;AAoBD,yBAA2E,SAAwC,EAAE,MAAQ;IAC5H,MAAM,CAAC,wBAAgB,CAAE;QACxB,MAAM,QAAA;QACN,cAAc,gBAAA;QACd,aAAa,eAAA;QACb,SAAS,WAAA;QACT,iBAAiB,mBAAA;QACjB,gBAAgB,kBAAA;KAChB,EAAE,SAAS,EAAE,MAAM,CAAE,CAAC;AACxB,CAAC;AATD,0CASC","file":"select.js","sourcesContent":["import {\n\tALL,\n\tDISTINCT,\n\tREDUCED,\n\tSELECT,\n\tVAR_SYMBOL,\n} from \"../../patterns/tokens\";\nimport {\n\tStringLiteral,\n\tToken,\n} from \"../../tokens\";\nimport { Container } from \"../Container\";\nimport {\n\tFinishClause,\n\tFromClause,\n\tSelectClause,\n\tSubFinishClause,\n\tSubSelectClause,\n\tSubWhereClause,\n} from \"../interfaces\";\nimport { genericDecorator } from \"../utils\";\nimport { fromDecorator } from \"./from\";\nimport { subFinishDecorator } from \"./subFinish\";\nimport { subWhereDecorator } from \"./where\";\n\n/**\n * Internal function that actually creates the tokens of the\n * SelectClause and SubSelectClause methods.\n *\n * @param self The container that is bound to the FromClause methods.\n * @param tokens Initial tokens depending which method the function\n * is called from.\n * @param variables Optional variables to be converted in tokens.\n * @returns Object with the methods to keep constructing the query.\n * Depending of the self container it will return a `FromClause`, as\n * `SelectClause` indicates; or a `WhereClause<SubFinishClause>`, as\n * `SubSelectClause` also indicates.\n * @private\n */\nfunction _select<T extends FinishClause>( self:Container<T | SubFinishClause>, tokens:Token[], variables?:string[] ):SubWhereClause | FromClause<T> {\n\tif( variables && variables.length === 0 ) throw new Error( \"Need to provide al least one variable.\" );\n\n\tif( variables ) variables.forEach( variable => tokens.push( VAR_SYMBOL, new StringLiteral( variable ) ) );\n\n\tconst container:Container<T | SubFinishClause> = new Container<T | SubFinishClause>( self, tokens );\n\n\tif( self._finishDecorator === subFinishDecorator )\n\t\treturn subWhereDecorator<SubFinishClause, {}>( container as Container<SubFinishClause>, {} );\n\treturn fromDecorator<T, {}>( container as Container<T>, {} );\n}\n\n/**\n * Set a list of variables to be retrieved by the query.\n *\n * @param variables The list of variables.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction select<T extends FinishClause>( this:Container<T>, ...variables:string[] ):FromClause<T> {\n\treturn _select<T>( this, [ SELECT ], variables ) as FromClause<T>;\n}\n\n/**\n * Set a list of variables to be retrieved by the query ensuring no\n * repetitions in the set of solutions.\n *\n * @param variables The list of variables.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction selectDistinct<T extends FinishClause>( this:Container<T>, ...variables:string[] ):FromClause<T> {\n\treturn _select<T>( this, [ SELECT, DISTINCT ], variables ) as FromClause<T>;\n}\n\n/**\n * Set a list of variables to be retrieved by the query permitting\n * eliminations of non-distinct solutions, but not ensuring a set of\n * unique ones.\n *\n * @param variables The list of variables.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction selectReduced<T extends FinishClause>( this:Container<T>, ...variables:string[] ):FromClause<T> {\n\treturn _select<T>( this, [ SELECT, REDUCED ], variables ) as FromClause<T>;\n}\n\n/**\n * Set that the query must return all the solutions for the variables\n * used in the where pattern matching.\n *\n * @returns Object with the methods to keep constructing the query.\n */\nfunction selectAll<T extends FinishClause>( this:Container<T> ):FromClause<T> {\n\treturn _select<T>( this, [ SELECT, ALL ] ) as FromClause<T>;\n}\n\n/**\n * Set that the query must return all the solutions for the variables\n * used in the where pattern matching, ensuring there is not\n * duplicated solutions.\n *\n * @returns Object with the methods to keep constructing the query.\n */\nfunction selectAllDistinct<T extends FinishClause>( this:Container<T> ):FromClause<T> {\n\treturn _select<T>( this, [ SELECT, DISTINCT, ALL ] ) as FromClause<T>;\n}\n\n/**\n * Set that the query must return all the solutions for the variables\n * used in the where pattern matching, permitting eliminations of\n * non-distinct solutions, but not ensuring a set of unique ones.\n *\n * @returns Object with the methods to keep constructing the query.\n */\nfunction selectAllReduced<T extends FinishClause>( this:Container<T> ):FromClause<T> {\n\treturn _select<T>( this, [ SELECT, REDUCED, ALL ] ) as FromClause<T>;\n}\n\n/**\n * Decorator that binds the {@link SelectClause} methods to a\n * container and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function selectDecorator<T extends FinishClause, W extends object>( container:Container<T>, object:W ):W & SelectClause<T>;\n/**\n * Decorator that binds the {@link SubSelectClause} methods to a subSelect\n * container and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function selectDecorator<W extends object>( container:Container<SubFinishClause>, object:W ):W & SubSelectClause;\nexport function selectDecorator<T extends FinishClause, W extends object>( container:Container<T | SubFinishClause>, object:W ):W & (SelectClause<T> | SubSelectClause) {\n\treturn genericDecorator( {\n\t\tselect,\n\t\tselectDistinct,\n\t\tselectReduced,\n\t\tselectAll,\n\t\tselectAllDistinct,\n\t\tselectAllReduced,\n\t}, container, object );\n}\n"]}