{"version":3,"sources":["clauses/decorators/values.ts"],"names":[],"mappings":"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","file":"values.js","sourcesContent":["import {\n\tgenericDecorator,\n\tValuesClause,\n} from \"./..\";\nimport { Container } from \"./../Container\";\nimport {\n\tFinishClause,\n\tSubFinishClause,\n} from \"./../interfaces\";\nimport { IRIResolver } from \"./../../iri/IRIResolver\";\nimport {\n\tPatternBuilder,\n\tSupportedNativeTypes,\n\tUndefined,\n} from \"./../../patterns\";\nimport {\n\tCLOSE_MULTI_BLOCK,\n\tCLOSE_SINGLE_BLOCK,\n\tCLOSE_SINGLE_LIST,\n\tOPEN_MULTI_BLOCK,\n\tOPEN_SINGLE_BLOCK,\n\tOPEN_SINGLE_LIST,\n\tVALUES,\n} from \"./../../patterns/tokens\";\nimport {\n\tLiteral,\n\tResource,\n\tVariable,\n} from \"./../../patterns/triples\";\nimport { Token } from \"./../../tokens\";\nimport { serialize } from \"./../../utils/ObjectPattern\";\n\ntype PossibleTypes = SupportedNativeTypes | Resource | Literal | Undefined;\n\n/**\n * Set the values of a variable to be combined into the results query.\n *\n * @param variable Variable to add values.\n * @param values The values to be combined.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction values<T extends FinishClause | SubFinishClause>( this:Container<T>, variable:string, values:SupportedNativeTypes | SupportedNativeTypes[] ):T;\n/**\n * Set the values of a variable to be combined into the results query.\n *\n * The values are constructed with a function that receives a\n * pattern builder.\n *\n * @param variable Variable to add values.\n * @param valuesBuilder Functions that returns the values to be added.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction values<T extends FinishClause | SubFinishClause>( this:Container<T>, variable:string, valuesBuilder:( builder:PatternBuilder ) => ( SupportedNativeTypes | Resource | Literal | Undefined ) | ( SupportedNativeTypes | Resource | Literal | Undefined )[] ):T;\n/**\n * Set the values of multiple variables to be combined into the results\n * query.\n *\n * @param variables Variables to add values.\n * @param values The values to be combined.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction values<T extends FinishClause | SubFinishClause>( this:Container<T>, variables:string[], values:SupportedNativeTypes[] | SupportedNativeTypes[][] ):T;\n/**\n * Set the values of multiple variables to be combined into the results\n * query.\n *\n * The values are constructed with a function that receives a\n * pattern builder.\n *\n * @param variables Variables to add values.\n * @param valuesBuilder Functions that returns the values to be added.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction values<T extends FinishClause | SubFinishClause>( this:Container<T>, variables:string[], valuesBuilder:( builder:PatternBuilder ) => ( SupportedNativeTypes | Resource | Literal | Undefined )[] | ( SupportedNativeTypes | Resource | Literal | Undefined )[][] ):T;\nfunction values<T extends FinishClause | SubFinishClause>( this:Container<T>, variableOrVariables:string | string[], valuesOrBuilder ):T {\n\tconst isSingle:boolean = ! Array.isArray( variableOrVariables );\n\tconst variables:Variable[] = ( isSingle ?\n\t\t[ variableOrVariables as string ] : variableOrVariables as string[] )\n\t\t.map( name => new Variable( null, name ) );\n\tconst tokens:Token[] = [ VALUES ];\n\n\tif( isSingle ) {\n\t\ttokens.push( ...variables[ 0 ].getSelfTokens(), OPEN_SINGLE_BLOCK );\n\t} else {\n\t\ttokens.push( OPEN_SINGLE_LIST );\n\t\tvariables.forEach( variable => tokens.push( ...variable.getSelfTokens() ) );\n\t\ttokens.push( CLOSE_SINGLE_LIST, OPEN_MULTI_BLOCK );\n\t}\n\n\tlet iriResolver:IRIResolver = void 0;\n\tconst rawValues:PossibleTypes | PossibleTypes[] | PossibleTypes[][] =\n\t\ttypeof valuesOrBuilder === \"function\" ?\n\t\t\tvaluesOrBuilder( new PatternBuilder( iriResolver = new IRIResolver( this._iriResolver ) ) ) :\n\t\t\tvaluesOrBuilder;\n\n\tconst values:PossibleTypes[][] = isSingle ?\n\t\tArray.isArray( rawValues ) ? (rawValues as PossibleTypes[]).map( value => [ value ] ) : [ [ rawValues ] ] :\n\t\tArray.isArray( rawValues[ 0 ] ) ? rawValues as PossibleTypes[][] : [ rawValues ] as PossibleTypes[][];\n\n\tvalues.forEach( ( valuesRow ) => {\n\t\tif( isSingle ) {\n\t\t\ttokens.push( ...serialize( valuesRow[ 0 ] ) );\n\t\t} else {\n\t\t\ttokens.push( OPEN_SINGLE_LIST );\n\t\t\tvaluesRow.forEach( value => tokens.push( ...serialize( value ) ) );\n\t\t\ttokens.push( CLOSE_SINGLE_LIST );\n\t\t}\n\t} );\n\n\ttokens.push( isSingle ? CLOSE_SINGLE_BLOCK : CLOSE_MULTI_BLOCK );\n\n\tconst container:Container<T> = new Container<T>( this, tokens, iriResolver );\n\treturn this._finishDecorator( container, {} );\n}\n\n/**\n * Decorator that binds the {@link ValuesClause} methods to a\n * container and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function valuesDecorator<T extends FinishClause | SubFinishClause, W extends object>( container:Container<T>, object:W ):W & ValuesClause<T> {\n\treturn genericDecorator( { values }, container, object );\n}"]}