{"version":3,"sources":["clauses/decorators/where.ts"],"names":[],"mappings":";;AACA,wDAAuD;AACvD,0DAA6D;AAO7D,gDAA0D;AAC1D,wDAAuD;AACvD,8CAG2B;AAC3B,mDAAiD;AAEjD,oDAAyD;AASzD,kBAAoD,QAAsC;IACzF,IAAM,MAAM,IAAa,cAAK,SAAK,yBAAc,CAAE,QAAQ,CAAE,CAAE,CAAC;IAEhE,IAAM,SAAS,GAA8B,IAAI,qBAAS,CAAmB,IAAI,EAAE,MAAM,CAAE,CAAC;IAC5F,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAE,SAAS,EAAE,2BAAc,CAAE,SAAS,EAAE,EAAE,CAAE,CAAE,CAAC;AAC5E,CAAC;AAcD,eAA2D,eAA4E;IACtI,IAAM,WAAW,GAAe,IAAI,yBAAW,CAAE,IAAI,CAAC,YAAY,CAAE,CAAC;IACrE,IAAM,QAAQ,GAAiC,eAAe,CAAE,IAAI,yBAAc,CAAE,WAAW,CAAE,CAAE,CAAC;IAEpG,IAAM,MAAM,IAAa,cAAK,SAAK,yBAAc,CAAE,QAAQ,CAAE,CAAE,CAAC;IAChE,IAAM,SAAS,GAAgB,IAAI,qBAAS,CAAK,IAAI,EAAE,MAAM,EAAE,WAAW,CAAE,CAAC;IAE7E,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAE,SAAS,EAAE,2BAAc,CAAE,SAAS,EAAE,EAAE,CAAE,CAAE,CAAC;AAC5E,CAAC;AAUD,wBAA0E,SAAsB,EAAE,MAAQ;IACzG,MAAM,CAAC,wBAAgB,CAAE,EAAE,KAAK,OAAA,EAAE,EAAE,SAAS,EAAE,MAAM,CAAE,CAAC;AACzD,CAAC;AAFD,wCAEC;AAUD,2BAAgF,SAAsB,EAAE,MAAQ;IAC/G,MAAM,CAAC,wBAAgB,CAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,SAAS,EAAE,MAAM,CAAE,CAAC;AACnE,CAAC;AAFD,8CAEC","file":"where.js","sourcesContent":["import { SubFinishClause } from \"sparqler/clauses\";\nimport { Container } from \"sparqler/clauses/Container\";\nimport { groupDecorator } from \"sparqler/clauses/decorators\";\nimport {\n\tFinishClause,\n\tGroupClause,\n\tSubWhereClause,\n\tWhereClause,\n} from \"sparqler/clauses/interfaces\";\nimport { genericDecorator } from \"sparqler/clauses/utils\";\nimport { IRIResolver } from \"sparqler/iri/IRIResolver\";\nimport {\n\tGraphPattern,\n\tPatternBuilder,\n} from \"sparqler/patterns\";\nimport { WHERE } from \"sparqler/patterns/tokens\";\nimport { Token } from \"sparqler/tokens\";\nimport { getBlockTokens } from \"sparqler/utils/Patterns\";\n\n/**\n * Sets the graph patterns the sub-query should match to retrieve the\n * sub-solutions data.\n *\n * @param patterns Patterns the sub-query should match.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction subWhere( this:Container<SubFinishClause>, patterns:GraphPattern | GraphPattern[] ):GroupClause<SubFinishClause> & SubFinishClause {\n\tconst tokens:Token[] = [ WHERE, ...getBlockTokens( patterns ) ];\n\n\tconst container:Container<SubFinishClause> = new Container<SubFinishClause>( this, tokens );\n\treturn this._finishDecorator( container, groupDecorator( container, {} ) );\n}\n\n/**\n * Specifies the graph patterns the query should match to retrieve\n * the solutions results.\n *\n * This pattern are created by a pattern constructor function that\n * receives a {@link PatternBuilder} which is a class that exposes\n * the possible elements and configurations the patterns chan have.\n *\n * @param patternFunction Function that retrieves a pattern or an\n * array of patterns to match.\n * @returns Object with the methods to keep constructing the query.\n */\nfunction where<T extends FinishClause>( this:Container<T>, patternFunction:( builder:PatternBuilder ) => GraphPattern | GraphPattern[ ] ):GroupClause<T> & T {\n\tconst iriResolver:IRIResolver = new IRIResolver( this._iriResolver );\n\tconst patterns:GraphPattern | GraphPattern[] = patternFunction( new PatternBuilder( iriResolver ) );\n\n\tconst tokens:Token[] = [ WHERE, ...getBlockTokens( patterns ) ];\n\tconst container:Container<T> = new Container<T>( this, tokens, iriResolver );\n\n\treturn this._finishDecorator( container, groupDecorator( container, {} ) );\n}\n\n/**\n * Decorator that binds the {@link WhereClause} methods to a container\n * and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function whereDecorator<T extends FinishClause, W extends object>( container:Container<T>, object:W ):W & WhereClause<T> {\n\treturn genericDecorator( { where }, container, object );\n}\n\n/**\n * Decorator that binds the {@link SubWhereClause} clause pattern\n * methods to a container and adds them to the provided object.\n *\n * @param container The container where to bind the respective methods.\n * @param object Object to be decorated with the bound methods.\n * @returns The same object provided that has been decorated.\n */\nexport function subWhereDecorator<T extends SubFinishClause, W extends object>( container:Container<T>, object:W ):W & SubWhereClause {\n\treturn genericDecorator( { where: subWhere }, container, object );\n}\n"]}