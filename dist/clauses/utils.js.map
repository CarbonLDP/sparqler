{"version":3,"sources":["clauses/utils.ts"],"names":[],"mappings":";;AAgBA,0BAAkF,UAAY,EAAE,SAAwB,EAAE,MAAQ;IACjI,GAAG,CAAA,CAAe,UAAyB,EAAzB,KAAA,MAAM,CAAC,IAAI,CAAE,UAAU,CAAE,EAAzB,cAAyB,EAAzB,IAAyB;QAAtC,IAAM,GAAG,SAAA;QAAgC,UAAU,CAAE,GAAG,CAAE,GAAG,UAAU,CAAE,GAAG,CAAE,CAAC,IAAI,CAAE,SAAS,CAAE,CAAC;KAAA;IACtG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAQ,MAAM,EAAE,UAAU,CAAE,CAAC;AAClD,CAAC;AAHD,4CAGC","file":"utils.js","sourcesContent":["import { Container } from \"sparqler/clauses/Container\";\n\n/**\n * Interface to represents the functions to bind by the {@link genericDecorator}.\n */\nexport interface FunctionProperties {\n\t[ method:string ]:Function;\n}\n\n/**\n * Function that takes a set of function properties to bind with a container and add them to the provided object.\n * @param properties Object with the function properties to bind to the container provided.\n * @param container Data container that will be used to bind the functions provided.\n * @param object Object that will be added with the bound function properties.\n * @returns The same object provided with the added function properties.\n */\nexport function genericDecorator<U extends FunctionProperties, W extends object>( properties:U, container:Container<any>, object:W ):W & U {\n\tfor( const key of Object.keys( properties ) ) properties[ key ] = properties[ key ].bind( container );\n\treturn Object.assign<W, U>( object, properties );\n}\n"]}