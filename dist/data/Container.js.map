{"version":3,"sources":["data/Container.ts"],"names":[],"mappings":";;AA4BA;IAmBC,mBAAa,IAAyB;;QACrC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAEpC,IAAI,eAAe,SAAS;YAAG,MAAM,CAAC,MAAM,CAAE,IAAI,CAAE,CAAC;IACtD,CAAC;IAEF,gBAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,8BAAS","file":"Container.js","sourcesContent":["import { TokenNode } from \"../tokens/TokenNode\";\n\nimport { IRIResolver } from \"./IRIResolver\";\n\n\n/**\n * Interface that describe the necessary data for the creation\n * of a {@link Container}.\n */\nexport interface ContainerData<TOKEN extends TokenNode> {\n\t/**\n\t * @see Container.iriResolver\n\t */\n\tiriResolver:IRIResolver;\n\t/**\n\t * @see Container.targetToken\n\t */\n\ttargetToken:TOKEN;\n}\n\n\n/**\n * Immutable class that contains the hidden data of the query statement.\n *\n * Every statement of the builder uses a different instance of the container\n * to make the query builder independent of the step and be able to\n * reuse it in a immutable-like pattern.\n */\nexport class Container<TOKEN extends TokenNode> implements ContainerData<TOKEN> {\n\t/**\n\t * The IRI resolver used to resolve and create IRIs and\n\t * Prefixed Names\n\t */\n\treadonly iriResolver:IRIResolver;\n\t/**\n\t * The target token where the state of the current query step is\n\t * actually stored.\n\t */\n\treadonly targetToken:TOKEN;\n\n\n\t/**\n\t * Constructor that receives an object with the base data of the\n\t * container.\n\t *\n\t * @param data The base data for the container creation.\n\t */\n\tconstructor( data:ContainerData<TOKEN> ) {\n\t\tthis.iriResolver = data.iriResolver;\n\t\tthis.targetToken = data.targetToken;\n\n\t\tif( new.target === Container ) Object.freeze( this );\n\t}\n\n}\n"]}