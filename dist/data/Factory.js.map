{"version":3,"sources":["data/Factory.ts"],"names":[],"mappings":";;AA6Ba,QAAA,OAAO,GAwBhB;IACH,UAAU,EAAV;QAAY,mBAAgC;aAAhC,UAAgC,EAAhC,qBAAgC,EAAhC,IAAgC;YAAhC,8BAAgC;;QAC3C,OAAO,UAAoB,SAAwB,EAAE,MAAQ;YAC5D,OAAO,SAAS;iBACd,MAAM,CAAE,UAAE,MAAM,EAAE,SAAS,IAAM,OAAA,SAAS,CAAE,SAAS,EAAE,MAAM,CAAE,EAA9B,CAA8B,EAAE,MAAM,CAAE,CAAC;QAC7E,CAAC,CAAC;IACH,CAAC;CACD,CAAC","file":"Factory.js","sourcesContent":["import { TokenNode } from \"../tokens/TokenNode\";\n\nimport { Container } from \"./Container\";\n\n\n/**\n * Interface that describes the factory functions. A specific type\n * of function that are used to create the instances of the objects\n * related to external data stored in a {@link Container}.\n */\nexport interface Factory<CONTAINER extends Container<TokenNode>, TARGET extends object> extends Function {\n\t/**\n\t * The function signature of the factory.\n\t *\n\t * @param container The related container with the stored data for\n\t * the factory.\n\t * @param object The base object from where to create the target\n\t * object.\n\t *\n\t * @return The provided object with the elements of the target\n\t * object to be created.\n\t */\n\t<OBJECT extends object>( container:CONTAINER, object:OBJECT ):OBJECT & TARGET;\n}\n\n\n/**\n * Constant with the utils functions for {@link Factory} objects.\n */\nexport const Factory:{\n\t/**\n\t * Creates a new factory function that applies the factory function provided.\n\t *\n\t * @param factory The factory function to be applied.\n\t */\n\tcreateFrom<CONTAINER extends Container<TokenNode>, TARGET extends object>( factory:Factory<CONTAINER, TARGET> ):Factory<CONTAINER, TARGET>;\n\t/**\n\t * Creates a new factory function that applies the two factory\n\t * functions provided.\n\t *\n\t * @param factory1 The fist factory function to be applied.\n\t * @param factory2 The second factory function to be applied.\n\t */\n\tcreateFrom<CONTAINER extends Container<TokenNode>, TARGET1 extends object, TARGET2 extends object>( factory1:Factory<CONTAINER, TARGET1>, factory2:Factory<CONTAINER, TARGET2> ):Factory<CONTAINER, TARGET1 & TARGET2>;\n\t/**\n\t * Created a new factory function that applies the three factory\n\t * function provided.\n\t *\n\t * @param factory1 The first factory function to be applied.\n\t * @param factory2 The second factory function to be applied.\n\t * @param factory3 The third factory function to be applied.\n\t */\n\tcreateFrom<CONTAINER extends Container<TokenNode>, TARGET1 extends object, TARGET2 extends object, TARGET3 extends object>( factory1:Factory<CONTAINER, TARGET1>, factory2:Factory<CONTAINER, TARGET2>, factory3:Factory<CONTAINER, TARGET3> ):Factory<CONTAINER, TARGET1 & TARGET2 & TARGET3>;\n} = {\n\tcreateFrom( ...factories:Factory<any, any>[] ):Factory<any, any> {\n\t\treturn <W extends object>( container:Container<any>, object:W ):W & any => {\n\t\t\treturn factories\n\t\t\t\t.reduce( ( target, factoryFn ) => factoryFn( container, target ), object );\n\t\t};\n\t}\n};\n"]}