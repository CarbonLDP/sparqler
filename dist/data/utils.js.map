{"version":3,"sources":["data/utils.ts"],"names":[],"mappings":";;AAUA,SAAgB,YAAY,CAA0C,OAAS,EAAE,SAAqB;IAArB,0BAAA,EAAA,YAAc,EAAO;IACrG,IAAM,IAAI,GAAK,MAAM,CAAC,MAAM,CAAE,MAAM,CAAC,cAAc,CAAE,OAAO,CAAE,CAAE,CAAC;IAEjE,IAAM,KAAK,GAAS,MAAM;SACxB,MAAM,CAAE,IAAI,EAAE,OAAO,EAAE,SAAS,CAAE,CAAC;IAErC,OAAO,MAAM,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;AAC/B,CAAC;AAPD,oCAOC","file":"utils.js","sourcesContent":["/**\n * Function used to create shallow clones of immutable objects, with\n * the option to replace with new values the respective element.\n *\n * @param element The immutable object to the cloned.\n * @param newValues Optional object with the new values to be replaced.\n *\n * @return The shallow clone with the replaces values, in read-only\n * using the {@link Object.freeze} method.\n */\nexport function cloneElement<T extends object, P extends Partial<T>>( element:T, newValues:P = {} as P ):Readonly<T & P> {\n\tconst base:T = Object.create( Object.getPrototypeOf( element ) );\n\n\tconst clone:T & P = Object\n\t\t.assign( base, element, newValues );\n\n\treturn Object.freeze( clone );\n}\n"]}