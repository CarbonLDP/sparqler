{"version":3,"sources":["index.ts"],"names":[],"mappings":";;AAIA,wDAAuD;AACvD,0DAA6D;AAQ7D;IAYC,kBAAa,eAAmC;QAC/C,IAAM,SAAS,GAAgB,IAAI,qBAAS,CAAK,eAAe,CAAE,CAAC;QACnE,MAAM,CAAC,2BAAc,CAAS,SAAS,EAAE,IAAI,CAAE,CAAC;IACjD,CAAC;IAEF,eAAC;AAAD,CAjBA,AAiBC,IAAA;AAjBY,4BAAQ;AAmBrB,kBAAe,QAAQ,CAAC","file":"index.js","sourcesContent":["import {\n\tFinishClause,\n\tQueryClause,\n} from \"sparqler/clauses/interfaces\";\nimport { Container } from \"sparqler/clauses/Container\";\nimport { queryDecorator } from \"sparqler/clauses/decorators\";\nimport { FromClause } from \"sparqler/clauses\";\n\nexport interface FinishDecorator<T> extends Function {\n\t<W extends object>( container:Container<T & FinishClause>, object:W ):T & W & FinishClause;\n}\n\n// Comment\nexport class SPARQLER<T extends FinishClause = FinishClause> implements QueryClause<T> {\n\n\tbase:( iri:string ) => QueryClause<T>;\n\tvocab:( iri:string ) => QueryClause<T>;\n\tprefix:( name:string, iri:string ) => QueryClause<T>;\n\tselect:( ...variables:string[] ) => FromClause<T>;\n\tselectDistinct:( ...variables:string[] ) => FromClause<T>;\n\tselectReduced:( ...variables:string[] ) => FromClause<T>;\n\tselectAll:() => FromClause<T>;\n\tselectAllDistinct:() => FromClause<T>;\n\tselectAllReduced:() => FromClause<T>;\n\n\tconstructor( finishDecorator?:FinishDecorator<T> ) {\n\t\tconst container:Container<T> = new Container<T>( finishDecorator );\n\t\treturn queryDecorator<T, {}>( container, this );\n\t}\n\n}\n\nexport default SPARQLER;\n"]}