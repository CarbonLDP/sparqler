{"version":3,"sources":["iri/utils.ts"],"names":[],"mappings":";;AAAA,SAAgB,UAAU,CAAE,GAAU;IACrC,OAAO,GAAG,CAAC,OAAO,CAAE,GAAG,CAAE,KAAK,CAAE,CAAC,CAAC;AACnC,CAAC;AAFD,gCAEC;AAED,SAAgB,WAAW,CAAE,GAAU;IACtC,OAAO,GAAG,CAAC,OAAO,CAAE,KAAK,CAAE,KAAK,CAAE,CAAC,CAAC;AACrC,CAAC;AAFD,kCAEC;AAED,SAAgB,UAAU,CAAE,GAAU;IACrC,OAAO,CAAE,UAAU,CAAE,GAAG,CAAE,CAAC;AAC5B,CAAC;AAFD,gCAEC;AAED,SAAgB,KAAK,CAAE,GAAU;IAChC,OAAO,WAAW,CAAE,GAAG,CAAE,IAAI,CAAE,UAAU,CAAE,GAAG,CAAE,CAAC;AAClD,CAAC;AAFD,sBAEC;AAED,IAAM,UAAU,GAAU,KAAK,CAAC;AAEhC,SAAgB,YAAY,CAAE,KAAY;IACzC,OAAO,UAAU,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;AACjC,CAAC;AAFD,oCAEC;AAED,IAAM,WAAW,GAAU,mDAAmD,CAAC;AAC/E,IAAM,eAAe,GAAU,eAAe,CAAC;AAC/C,IAAM,oBAAoB,GAAU,6BAA6B,CAAC;AAElE,SAAgB,UAAU,CAAE,GAAU;IACrC,OAAO,eAAe,CAAC,IAAI,CAAE,GAAG,CAAE,IAAI,CAAE,WAAW,CAAE,GAAG,CAAE,CAAC;AAC5D,CAAC;AAFD,gCAEC;AAED,SAAgB,gBAAgB,CAAE,GAAU;IAC3C,IAAI,KAAK,GAA0B,WAAW,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC;IAC3D,IAAI,KAAK,KAAK,IAAI,IAAI,WAAW,CAAE,GAAG,CAAE;QAAG,OAAO,IAAI,CAAC;IAEvD,IAAI,MAAM,GAAU,KAAK,CAAE,CAAC,CAAE,IAAI,EAAE,CAAC;IACrC,IAAI,KAAK,GAAU,GAAG,CAAC,MAAM,CAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC,OAAO,CAAE,oBAAoB,EAAE,MAAM,CAAE,CAAC;IAE3F,OAAO;QACN,MAAM;QACN,KAAK;KACL,CAAC;AACH,CAAC;AAXD,4CAWC","file":"utils.js","sourcesContent":["export function isAbsolute( iri:string ):boolean {\n\treturn iri.indexOf( \":\" ) !== - 1;\n}\n\nexport function hasProtocol( iri:string ):boolean {\n\treturn iri.indexOf( \"://\" ) !== - 1;\n}\n\nexport function isRelative( iri:string ):boolean {\n\treturn ! isAbsolute( iri );\n}\n\nexport function isIRI( iri:string ):boolean {\n\treturn hasProtocol( iri ) || ! isAbsolute( iri );\n}\n\nconst bNodeRegex:RegExp = /^_:/;\n\nexport function isBNodeLabel( label:string ):boolean {\n\treturn bNodeRegex.test( label );\n}\n\nconst prefixRegex:RegExp = /([A-Za-z](([A-Za-z_\\-0-9]|\\.)*[A-Za-z_\\-0-9])?)?:/;\nconst softPrefixRegex:RegExp = /^(?!_:)[^]*?:/;\nconst prefixNormalizeRegex:RegExp = /([_~.\\-!$&'|()*+,;=/?#@%])/g;\n\nexport function isPrefixed( iri:string ):boolean {\n\treturn softPrefixRegex.test( iri ) && ! hasProtocol( iri );\n}\n\nexport function getPrefixedParts( iri:string ):[ string, string ] | null {\n\tlet parts:RegExpExecArray | null = prefixRegex.exec( iri );\n\tif( parts === null || hasProtocol( iri ) ) return null;\n\n\tlet prefix:string = parts[ 1 ] || \"\";\n\tlet local:string = iri.substr( prefix.length + 1 ).replace( prefixNormalizeRegex, \"\\\\$1\" );\n\n\treturn [\n\t\tprefix,\n\t\tlocal,\n\t];\n}\n"]}