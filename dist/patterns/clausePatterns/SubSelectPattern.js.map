{"version":3,"sources":["patterns/clausePatterns/SubSelectPattern.ts"],"names":[],"mappings":";;AAAA,kDAAiD;AAEjD,8DAA6D;AAE7D,4DAA2D;AAE3D,+CAA8C;AA2F9C,SAAS,WAAW,CAAkC,SAAW,EAAE,QAAgC;IAClG,OAAO;QAAE,mBAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,8BAAqB;;QAC7B,IAAM,WAAW,GAAkB,IAAI,+BAAc,CAAE,QAAQ,CAAE,CAAC;QAClE,IAAI,SAAS,CAAC,MAAM;YAAG,WAAW,CAAC,WAAW,OAAvB,WAAW,EAAiB,SAAS,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,IAAI,6BAAa,CAAE,CAAC,CAAE,EAAtB,CAAsB,CAAE,EAAG;QAElG,IAAM,YAAY,GAA6B,IAAI,qBAAS,CAAE;YAC7D,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,WAAW,aAAA;SACX,CAAE,CAAC;QACJ,OAAO,2BAAY,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IACpD,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,gBAAgB,GAczB;IACH,UAAU,EAAV,UAA8D,SAAW,EAAE,MAAQ;QAClF,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,MAAM,EAAE,WAAW,CAAE,SAAS,CAAE;YAChC,cAAc,EAAE,WAAW,CAAE,SAAS,EAAE,UAAU,CAAE;YACpD,aAAa,EAAE,WAAW,CAAE,SAAS,EAAE,SAAS,CAAE;YAClD,SAAS,EAAE,cAAM,OAAA,WAAW,CAAE,SAAS,CAAE,EAAE,EAA1B,CAA0B;YAC3C,iBAAiB,EAAE,cAAM,OAAA,WAAW,CAAE,SAAS,EAAE,UAAU,CAAE,EAAE,EAAtC,CAAsC;YAC/D,gBAAgB,EAAE,cAAM,OAAA,WAAW,CAAE,SAAS,EAAE,SAAS,CAAE,EAAE,EAArC,CAAqC;SAC7D,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"SubSelectPattern.js","sourcesContent":["import { Container } from \"../../data/Container\";\n\nimport { SubSelectToken } from \"../../tokens/SubSelectToken\";\nimport { TokenNode } from \"../../tokens/TokenNode\";\nimport { VariableToken } from \"../../tokens/VariableToken\";\n\nimport { WherePattern } from \"./WherePattern\";\n\n\n/**\n * Interface with the methods available to make a sub-SELECT query.\n */\nexport interface SubSelectPattern {\n\t/**\n\t * Set a list of variables to be retrieved by the sub-query.\n\t *\n\t * @param variables The list of variables.\n\t * IF no variable is provided, the behaviour will be the same\n\t * as {@link SubSelectPattern.selectAll}\n\t *\n\t * @returns Object with the methods to keep constructing the\n\t * sub-query.\n\t */\n\tselect( ...variables:string[] ):WherePattern;\n\n\t/**\n\t * Set a list of variables to be retrieved by the sub-query\n\t * ensuring no repetitions in the set of solutions.\n\t *\n\t * @param variables The list of variables.\n\t * IF no variable is provided, the behaviour will be the same\n\t * as {@link SubSelectPattern.selectAllDistinct}\n\t *\n\t * @returns Object with the methods to keep constructing the\n\t * sub-query.\n\t */\n\tselectDistinct( ...variables:string[] ):WherePattern;\n\n\t/**\n\t * Set a list of variables to be retrieved by the sub-query\n\t * permitting eliminations of non-distinct solutions, but not\n\t * ensuring a set of unique ones.\n\t *\n\t * @param variables The list of variables.\n\t * IF no variable is provided, the behaviour will be the same\n\t * as {@link SubSelectPattern.selectAllReduced}\n\t *\n\t * @returns Object with the methods to keep constructing the\n\t * sub-query.\n\t */\n\tselectReduced( ...variables:string[] ):WherePattern;\n\n\t/**\n\t * Set that the sub-query must return all the solutions for the\n\t * variables used in the where pattern matching.\n\t *\n\t * @returns Object with the methods to keep constructing the\n\t * sub-query.\n\t */\n\tselectAll():WherePattern;\n\n\t/**\n\t * Set that the sub-query must return all the solutions for the\n\t * variables used in the where pattern matching, ensuring there\n\t * is not duplicated solutions.\n\t *\n\t * @returns Object with the methods to keep constructing the\n\t * sub-query.\n\t */\n\tselectAllDistinct():WherePattern;\n\n\t/**\n\t * Set that the sub-query must return all the solutions for the\n\t * variables used in the where pattern matching, permitting\n\t * eliminations of non-distinct solutions, but not ensuring a set\n\t * of unique ones.\n\t *\n\t * @returns Object with the methods to keep constructing the\n\t * sub-query.\n\t */\n\tselectAllReduced():WherePattern;\n}\n\n\n/**\n * Function that creates a generic {@link SubSelectClause.select} function.\n * This function is used to create all the methods for the {@link SubSelectClause}\n *\n * @param container The container with the query data for the statement.\n * @param modifier The optional modifier of the SELECT queries.\n *\n * @returns A generic \"select\" function that shares the\n * {@link SubSelectClause.select} signature. It behaviour depends of\n * the {@param modifier} set.\n *\n * @private\n */\nfunction getSelectFn<C extends Container<TokenNode>>( container:C, modifier?:\"DISTINCT\" | \"REDUCED\" ):SubSelectPattern[ \"select\" ] {\n\treturn ( ...variables:string[] ) => {\n\t\tconst targetToken:SubSelectToken = new SubSelectToken( modifier );\n\t\tif( variables.length ) targetToken.addVariable( ...variables.map( x => new VariableToken( x ) ) );\n\n\t\tconst newContainer:Container<SubSelectToken> = new Container( {\n\t\t\tiriResolver: container.iriResolver,\n\t\t\ttargetToken\n\t\t} );\n\t\treturn WherePattern.createFrom( newContainer, {} );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link SubSelectClause} objects.\n */\nexport const SubSelectPattern:{\n\t/**\n\t * Factory function that allows to crete a {@link SubSelectClause}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link SubSelectClause} statement.\n\t * @param object The base base from where to create the\n\t * {@link SubSelectClause} statement.\n\t *\n\t * @return The {@link SubSelectClause} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<TokenNode>, O extends object>( container:C, object:O ):O & SubSelectPattern;\n} = {\n\tcreateFrom<C extends Container<TokenNode>, O extends object>( container:C, object:O ):O & SubSelectPattern {\n\t\treturn Object.assign( object, {\n\t\t\tselect: getSelectFn( container ),\n\t\t\tselectDistinct: getSelectFn( container, \"DISTINCT\" ),\n\t\t\tselectReduced: getSelectFn( container, \"REDUCED\" ),\n\t\t\tselectAll: () => getSelectFn( container )(),\n\t\t\tselectAllDistinct: () => getSelectFn( container, \"DISTINCT\" )(),\n\t\t\tselectAllReduced: () => getSelectFn( container, \"REDUCED\" )(),\n\t\t} );\n\t},\n};\n"]}