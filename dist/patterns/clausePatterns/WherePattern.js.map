{"version":3,"sources":["patterns/clausePatterns/WherePattern.ts"],"names":[],"mappings":";;AAAA,yDAAwD;AAExD,0CAAgD;AAGhD,sDAAqD;AAGrD,iDAAgD;AA8BhD,SAAS,UAAU,CAAE,SAAmC;IACvD,OAAO,UAAE,QAA4B;;QACpC,IAAM,KAAK,GAAc,IAAI,uBAAU,EAAE,CAAC;QAC1C,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAE,QAAQ,CAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,QAAQ,CAAE,CAAC;QAC/D,CAAA,KAAA,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAA,CAAC,IAAI,WAAK,QAAQ,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,EAAE,EAAd,CAAc,CAAE,EAAG;QAE3E,IAAM,WAAW,GAAkB,oBAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,KAAK,OAAA,EAAE,CAAE,CAAC;QACpF,IAAM,YAAY,GAAG,oBAAY,CAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAE,CAAE,CAAC;QAEhE,IAAM,WAAW,GAA8B,yBAAW,CAAC,UAAU,CAAE,6BAAa,CAAC,UAAU,EAAE,YAAY,EAAE,EAAE,CAAE,CAAC;QACpH,OAAO,6BAAa,CAAC,UAAU,CAAE,YAAY,EAAE,WAAW,CAAE,CAAC;IAC9D,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,YAAY,GAerB;IACH,UAAU,EAAV,UAAmE,SAAW,EAAE,MAAQ;QACvF,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,KAAK,EAAE,UAAU,CAAE,SAAS,CAAE;SAC9B,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"WherePattern.js","sourcesContent":["import { GroupClause } from \"../../clauses/GroupClause\";\nimport { Container } from \"../../data/Container\";\nimport { cloneElement } from \"../../data/utils\";\n\nimport { SubSelectToken } from \"../../tokens/SubSelectToken\";\nimport { WhereToken } from \"../../tokens/WhereToken\";\n\nimport { Pattern } from \"../Pattern\";\nimport { FinishPattern } from \"./FinishPattern\";\n\n\n/**\n * Interface with the methods available to make a WHERE statement of\n * a sub-query.\n */\nexport interface WherePattern {\n\t/**\n\t * Sets the graph patterns the sub-query should match to retrieve the\n\t * sub-solutions data.\n\t *\n\t * @param patterns Patterns the sub-query should match.\n\t *\n\t * @returns Object with the methods to keep constructing the\n\t * sub-query.\n\t */\n\twhere( patterns:Pattern | Pattern[] ):GroupClause<FinishPattern> & FinishPattern;\n}\n\n\n/**\n * Function that creates the {@link WherePattern.where} function.\n *\n * @param container The container with the query data of the statement.\n *\n * @returns The {@link WherePattern.where} function.\n *\n * @private\n */\nfunction getWhereFn( container:Container<SubSelectToken> ):WherePattern[ \"where\" ] {\n\treturn ( patterns:Pattern | Pattern[] ) => {\n\t\tconst where:WhereToken = new WhereToken();\n\t\tpatterns = Array.isArray( patterns ) ? patterns : [ patterns ];\n\t\twhere.groupPattern.patterns.push( ...patterns.map( x => x.getPattern() ) );\n\n\t\tconst targetToken:SubSelectToken = cloneElement( container.targetToken, { where } );\n\t\tconst newContainer = cloneElement( container, { targetToken } );\n\n\t\tconst groupClause:GroupClause<FinishPattern> = GroupClause.createFrom( FinishPattern.createFrom, newContainer, {} );\n\t\treturn FinishPattern.createFrom( newContainer, groupClause );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link WherePattern} objects.\n */\nexport const WherePattern:{\n\n\t/**\n\t * Factory function that allows to crete a {@link WherePattern}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link WherePattern} statement.\n\t * @param object The base base from where to create the\n\t * {@link WherePattern} statement.\n\t *\n\t * @return The {@link WherePattern} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<SubSelectToken>, O extends object>( container:C, object:O ):O & WherePattern;\n} = {\n\tcreateFrom<C extends Container<SubSelectToken>, O extends object>( container:C, object:O ):O & WherePattern {\n\t\treturn Object.assign( object, {\n\t\t\twhere: getWhereFn( container ),\n\t\t} );\n\t},\n};"]}