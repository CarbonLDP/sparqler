{"version":3,"sources":["patterns/notTriplePatterns/GroupPattern.ts"],"names":[],"mappings":";;AAAA,oDAAmD;AAEnD,oEAAmE;AACnE,oEAAmE;AAGnE,uDAAsD;AACtD,+CAA8C;AAW9C,oBAAqB,SAAuC;IAC3D,OAAO,UAAA,QAAQ;;QACd,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAE,QAAQ,CAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,QAAQ,CAAE,CAAC;QAC/D,IAAM,aAAa,GAAqB,IAAI,qCAAiB,EAAE,CAAC;QAChE,CAAA,KAAA,aAAa,CAAC,QAAQ,CAAA,CAAC,IAAI,WAAK,QAAQ,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,EAAE,EAAd,CAAc,CAAE,EAAG;QAEtE,IAAM,UAAU,GAAqB,IAAI,qCAAiB,EAAE,CAAC;QAC7D,UAAU,CAAC,aAAa,CAAC,IAAI,CAAE,SAAS,CAAC,WAAW,EAAE,aAAa,CAAE,CAAC;QAGtE,IAAM,YAAY,GAAG,IAAI,uBAAU,CAAE;YACpC,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,WAAW,EAAE,UAAU;SACvB,CAAE,CAAC;QACJ,OAAO,2BAAY,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IACpD,CAAC,CAAA;AACF,CAAC;AAMY,QAAA,YAAY,GAAG;IAC3B,UAAU,EAAV,UAAuE,SAAW,EAAE,MAAQ;QAC3F,OAAO,mCAAgB,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACrE,KAAK,EAAE,UAAU,CAAE,SAAS,CAAE;SAC9B,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"GroupPattern.js","sourcesContent":["import { Container2 } from \"../../data/Container2\";\n\nimport { GroupPatternToken } from \"../../tokens/GroupPatternToken\";\nimport { UnionPatternToken } from \"../../tokens/UnionPatternToken\";\n\nimport { Pattern } from \"../Pattern\";\nimport { NotTriplePattern } from \"./NotTriplePattern\";\nimport { UnionPattern } from \"./UnionPattern\";\n\n\n/**\n * @todo\n */\nexport interface GroupPattern extends NotTriplePattern<GroupPatternToken> {\n\tunion( patterns:Pattern | Pattern[] ):UnionPattern;\n}\n\n\nfunction getUnionFn( container:Container2<GroupPatternToken> ):GroupPattern[ \"union\" ] {\n\treturn patterns => {\n\t\tpatterns = Array.isArray( patterns ) ? patterns : [ patterns ];\n\t\tconst newGroupToken:GroupPatternToken = new GroupPatternToken();\n\t\tnewGroupToken.patterns.push( ...patterns.map( x => x.getPattern() ) );\n\n\t\tconst unionToken:UnionPatternToken = new UnionPatternToken();\n\t\tunionToken.groupPatterns.push( container.targetToken, newGroupToken );\n\n\n\t\tconst newContainer = new Container2( {\n\t\t\tiriResolver: container.iriResolver,\n\t\t\ttargetToken: unionToken,\n\t\t} );\n\t\treturn UnionPattern.createFrom( newContainer, {} );\n\t}\n}\n\n\n/**\n * @todo\n */\nexport const GroupPattern = {\n\tcreateFrom<C extends Container2<GroupPatternToken>, O extends object>( container:C, object:O ):GroupPattern {\n\t\treturn NotTriplePattern.createFrom( container, Object.assign( object, {\n\t\t\tunion: getUnionFn( container ),\n\t\t} ) );\n\t}\n};"]}