{"version":3,"sources":["patterns/notTriplePatterns/MultipleValuesPattern.ts"],"names":[],"mappings":";;AACA,0CAAgD;AAUhD,kCAAwC;AAExC,uDAAsD;AA2BtD,SAAS,QAAQ,CAAoC,SAAW;IAC/D,OAAO;QAAE,gBAAmE;aAAnE,UAAmE,EAAnE,qBAAmE,EAAnE,IAAmE;YAAnE,2BAAmE;;QAC3E,IAAM,YAAY,GAAG,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC1D,YAAY,CAAC,IAAI,CAAE,MAAM,CAAC,GAAG,CAAE,oBAAY,CAAE,CAAE,CAAC;QAEhD,IAAM,WAAW,GAAG,oBAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,CAAE,CAAC;QACpF,IAAM,YAAY,GAAG,oBAAY,CAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAgB,CAAE,CAAC;QAE9E,OAAO,iCAAyB,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IACjE,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,qBAAqB,GAc9B;IACH,UAAU,EAAV,UAAgE,SAAW,EAAE,MAAQ;QACpF,OAAO,mCAAgB,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACrE,GAAG,EAAE,QAAQ,CAAE,SAAS,CAAE;SAC1B,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC;AAKW,QAAA,yBAAyB,GAclC;IACH,UAAU,EAAV,UAAgE,SAAW,EAAE,MAAQ;QACpF,OAAO,mCAAgB,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACrE,GAAG,EAAE,QAAQ,CAAE,SAAS,CAAE;SAC1B,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"MultipleValuesPattern.js","sourcesContent":["import { Container } from \"../../data/Container\";\nimport { cloneElement } from \"../../data/utils\";\n\nimport { ValuesToken } from \"../../tokens/ValuesToken\";\n\nimport { SupportedNativeTypes } from \"../SupportedNativeTypes\";\n\nimport { Literal } from \"../triplePatterns/Literal\";\nimport { Resource } from \"../triplePatterns/Resource\";\n\nimport { Undefined } from \"../Undefined\";\nimport { convertValue } from \"../utils\";\n\nimport { NotTriplePattern } from \"./NotTriplePattern\";\n\n\n/**\n * Wrapper for easier usage of SPARQL VALUES patterns that have\n * multiple variables.\n */\nexport interface MultipleValuesPattern extends NotTriplePattern<ValuesToken> {\n\thas( ...values:(SupportedNativeTypes | Resource | Literal | Undefined)[] ):MultipleValuesPatternMore;\n}\n\n/**\n * Wrapper for add more values to a {@link MultipleValuesPattern}.\n */\nexport interface MultipleValuesPatternMore extends NotTriplePattern<ValuesToken> {\n\tand( ...values:(SupportedNativeTypes | Resource | Literal | Undefined)[] ):MultipleValuesPatternMore;\n}\n\n\n/**\n * Function that creates a generic {@link MultipleValuesPattern.has} function.\n * This function is used also for declaring {@link MultipleValuesPatternMore.and}\n *\n * @param container The container with the query data for the statement.\n *\n * @private\n */\nfunction getHasFn<C extends Container<ValuesToken>>( container:C ):MultipleValuesPattern[ \"has\" ] {\n\treturn ( ...values:(SupportedNativeTypes | Resource | Literal | Undefined)[] ) => {\n\t\tconst parsedValues = container.targetToken.values.slice();\n\t\tparsedValues.push( values.map( convertValue ) );\n\n\t\tconst targetToken = cloneElement( container.targetToken, { values: parsedValues } );\n\t\tconst newContainer = cloneElement( container, { targetToken } as Partial<C> );\n\n\t\treturn MultipleValuesPatternMore.createFrom( newContainer, {} );\n\t};\n}\n\n\n/**\n * Constant with utils for {@link MultipleValuesPattern} objects.\n */\nexport const MultipleValuesPattern:{\n\t/**\n\t * Factory function that allows to crete a {@link MultipleValuesPattern}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link MultipleValuesPattern} statement.\n\t * @param object The base base from where to create the\n\t * {@link MultipleValuesPattern} statement.\n\t *\n\t * @return The {@link MultipleValuesPattern} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<ValuesToken>, O extends object>( container:C, object:O ):MultipleValuesPattern;\n} = {\n\tcreateFrom<C extends Container<ValuesToken>, O extends object>( container:C, object:O ):MultipleValuesPattern {\n\t\treturn NotTriplePattern.createFrom( container, Object.assign( object, {\n\t\t\thas: getHasFn( container ),\n\t\t} ) );\n\t},\n};\n\n/**\n * Constant with utils for {@link MultipleValuesPatternMore} objects.\n */\nexport const MultipleValuesPatternMore:{\n\t/**\n\t * Factory function that allows to crete a {@link MultipleValuesPatternMore}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link MultipleValuesPatternMore} statement.\n\t * @param object The base base from where to create the\n\t * {@link MultipleValuesPatternMore} statement.\n\t *\n\t * @return The {@link MultipleValuesPatternMore} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<ValuesToken>, O extends object>( container:C, object:O ):MultipleValuesPatternMore;\n} = {\n\tcreateFrom<C extends Container<ValuesToken>, O extends object>( container:C, object:O ):MultipleValuesPatternMore {\n\t\treturn NotTriplePattern.createFrom( container, Object.assign( object, {\n\t\t\tand: getHasFn( container ),\n\t\t} ) );\n\t},\n};\n"]}