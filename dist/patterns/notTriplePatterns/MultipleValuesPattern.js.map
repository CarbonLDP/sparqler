{"version":3,"sources":["patterns/notTriplePatterns/MultipleValuesPattern.ts"],"names":[],"mappings":";;AACA,0CAAgD;AAOhD,kCAAwC;AAExC,uDAAsD;AAqBtD,SAAS,QAAQ,CAAoC,SAAW;IAC/D,OAAO;QAAE,gBAAmE;aAAnE,UAAmE,EAAnE,qBAAmE,EAAnE,IAAmE;YAAnE,2BAAmE;;QAC3E,IAAM,YAAY,GAAG,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC1D,YAAY,CAAC,IAAI,CAAE,MAAM,CAAC,GAAG,CAAE,oBAAY,CAAE,CAAE,CAAC;QAEhD,IAAM,WAAW,GAAG,oBAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,CAAE,CAAC;QACpF,IAAM,YAAY,GAAG,oBAAY,CAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAgB,CAAE,CAAC;QAE9E,OAAO,gCAAwB,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IAChE,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,qBAAqB,GAAG;IACpC,UAAU,EAAV,UAAgE,SAAW,EAAE,MAAQ;QACpF,OAAO,mCAAgB,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACrE,GAAG,EAAE,QAAQ,CAAE,SAAS,CAAE;SAC1B,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC;AAKW,QAAA,wBAAwB,GAAG;IACvC,UAAU,EAAV,UAAgE,SAAW,EAAE,MAAQ;QACpF,OAAO,mCAAgB,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YACrE,GAAG,EAAE,QAAQ,CAAE,SAAS,CAAE;SAC1B,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"MultipleValuesPattern.js","sourcesContent":["import { Container } from \"../../data/Container\";\nimport { cloneElement } from \"../../data/utils\";\n\nimport { ValuesToken } from \"../../tokens/ValuesToken\";\nimport { SupportedNativeTypes } from \"../SupportedNativeTypes\";\nimport { Literal } from \"../triplePatterns/Literal\";\nimport { Resource } from \"../triplePatterns/Resource\";\nimport { Undefined } from \"../Undefined\";\nimport { convertValue } from \"../utils\";\n\nimport { NotTriplePattern } from \"./NotTriplePattern\";\n\n\n/**\n * @todo\n */\nexport interface MultipleValuesPattern extends NotTriplePattern<ValuesToken> {\n\thas( ...value:(SupportedNativeTypes | Resource | Literal | Undefined)[] ):MultipleValuesPatternAnd;\n}\n\n/**\n * @todo\n */\nexport interface MultipleValuesPatternAnd extends NotTriplePattern<ValuesToken> {\n\tand( ...value:(SupportedNativeTypes | Resource | Literal | Undefined)[] ):MultipleValuesPatternAnd;\n}\n\n\n/**\n * @todo\n */\nfunction getHasFn<C extends Container<ValuesToken>>( container:C ):MultipleValuesPattern[ \"has\" ] {\n\treturn ( ...values:(SupportedNativeTypes | Resource | Literal | Undefined)[] ) => {\n\t\tconst parsedValues = container.targetToken.values.slice();\n\t\tparsedValues.push( values.map( convertValue ) );\n\n\t\tconst targetToken = cloneElement( container.targetToken, { values: parsedValues } );\n\t\tconst newContainer = cloneElement( container, { targetToken } as Partial<C> );\n\n\t\treturn MultipleValuesPatternAnd.createFrom( newContainer, {} );\n\t};\n}\n\n\n/**\n * @todo\n */\nexport const MultipleValuesPattern = {\n\tcreateFrom<C extends Container<ValuesToken>, O extends object>( container:C, object:O ):MultipleValuesPattern {\n\t\treturn NotTriplePattern.createFrom( container, Object.assign( object, {\n\t\t\thas: getHasFn( container ),\n\t\t} ) );\n\t},\n};\n\n/**\n * @todo\n */\nexport const MultipleValuesPatternAnd = {\n\tcreateFrom<C extends Container<ValuesToken>, O extends object>( container:C, object:O ):MultipleValuesPatternAnd {\n\t\treturn NotTriplePattern.createFrom( container, Object.assign( object, {\n\t\t\tand: getHasFn( container ),\n\t\t} ) );\n\t},\n};\n"]}