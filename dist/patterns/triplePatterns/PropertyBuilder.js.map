{"version":3,"sources":["patterns/triplePatterns/PropertyBuilder.ts"],"names":[],"mappings":";;AAEA,0CAAgD;AAGhD,4DAA2D;AAK3D,kCAAsD;AA0CtD,SAAS,eAAe,CAA6D,SAAW,EAAE,aAA2B;IAC5H,IAAM,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAE,aAAa,CAAE,CAAC;IAC5E,IAAM,WAAW,GAAG,oBAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,UAAU,YAAA,EAAE,CAAE,CAAC;IAC1E,OAAO,oBAAY,CAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAgB,CAAE,CAAC;AACjE,CAAC;AAED,SAAS,gBAAgB,CAA6D,SAAW,EAAE,aAA2B;IAC7H,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAE,aAAa,CAAE,CAAC;IACvD,OAAO,SAAS,CAAC;AAClB,CAAC;AAWD,SAAS,QAAQ,CAA+E,cAA4B,EAAE,SAAW;IACxI,OAAO,UAAE,QAAqC,EAAE,OAA2B;QAC1E,IAAM,SAAS,GAA4B,CAAC,OAAO,QAAQ,KAAK,QAAQ,CAAC;YACxE,CAAC,CAAC,oBAAY,CAAE,SAAS,EAAE,QAAQ,CAAE;YACrC,CAAC,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAEzB,IAAM,aAAa,GAAiB,IAAI,6BAAa,CAAE,SAAS,CAAE,CAAC;QAEnE,OAAO,GAAG,KAAK,CAAC,OAAO,CAAE,OAAO,CAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAE,OAAO,CAAE,CAAC;QAC3D,aAAa,CAAC,SAAS,OAAvB,aAAa,EAAe,OAAO,CAAC,GAAG,CAAE,oBAAY,CAAE,EAAG;QAE1D,IAAM,YAAY,GAAG,SAAS,CAAC,WAAW,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;YAC/D,eAAe,CAAE,SAAS,EAAE,aAAa,CAAE,CAAC,CAAC;YAC7C,gBAAgB,CAAE,SAAS,EAAE,aAAa,CAAE,CAAC;QAE9C,IAAM,aAAa,GAAK,cAAc,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;QAC3D,OAAO,2BAAmB,CAAC,UAAU,CAAE,cAAc,EAAE,YAAY,EAAE,aAAa,CAAE,CAAC;IACtF,CAAC,CAAC;AACH,CAAC;AAMY,QAAA,eAAe,GAgBxB;IACH,UAAU,EAAV,UAA2G,cAA4B,EAAE,SAAW,EAAE,MAAQ;QAC7J,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,GAAG,EAAE,QAAQ,CAAE,cAAc,EAAE,SAAS,CAAE;SAC1C,CAAE,CAAC;IACL,CAAC;CACD,CAAC;AAKW,QAAA,mBAAmB,GAgB5B;IACH,UAAU,EAAV,UAA2G,cAA4B,EAAE,SAAW,EAAE,MAAQ;QAC7J,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,GAAG,EAAE,QAAQ,CAAE,cAAc,EAAE,SAAS,CAAE;SAC1C,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"PropertyBuilder.js","sourcesContent":["import { Container } from \"../../data/Container\";\nimport { Factory } from \"../../data/Factory\";\nimport { cloneElement } from \"../../data/utils\";\n\nimport { BlankNodePropertyToken } from \"../../tokens/BlankNodePropertyToken\";\nimport { PropertyToken } from \"../../tokens/PropertyToken\";\nimport { TripleToken } from \"../../tokens/TripleToken\";\nimport { VariableOrIRIToken } from \"../../tokens/VariableOrIRIToken\";\n\nimport { SupportedNativeTypes } from \"../SupportedNativeTypes\";\nimport { _resolvePath, convertValue } from \"../utils\";\n\nimport { BlankNodeProperty } from \"./BlankNodeProperty\";\nimport { Collection } from \"./Collection\";\nimport { Literal } from \"./Literal\";\nimport { Resource } from \"./Resource\";\nimport { Variable } from \"./Variable\";\n\n\n/**\n * Object that allows to add a property to the triple related.\n */\nexport interface PropertyBuilder<T extends object> {\n\t/**\n\t * Assign a property and values to the triple statement.\n\t *\n\t * @param property The property to be added in the triple.\n\t * @param objects The value(s) the property added have.\n\t *\n\t * @return Object that allows to add more data to the triple.\n\t */\n\thas( property:Variable | Resource | \"a\" | string, objects:(SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty) | (SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty)[] ):PropertyBuilderMore<T> & T;\n}\n\n/**\n * Object that allows to add more properties to the triple related.\n */\nexport interface PropertyBuilderMore<T extends object> {\n\t/**\n\t * Added another property and values to the triple.\n\t *\n\t * @param property The property to be added in the triple.\n\t * @param objects The value(s) the property added have.\n\t *\n\t * @return Object that allows to add more data to the triple.\n\t */\n\tand( property:Variable | Resource | \"a\" | string, objects:(SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty) | (SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty)[] ):PropertyBuilderMore<T> & T;\n}\n\n\ntype Objects = SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty;\n\nfunction _cloneContainer<C extends Container<TripleToken | BlankNodePropertyToken>>( container:C, propertyToken:PropertyToken ):C {\n\tconst properties = container.targetToken.properties.concat( propertyToken );\n\tconst targetToken = cloneElement( container.targetToken, { properties } );\n\treturn cloneElement( container, { targetToken } as Partial<C> );\n}\n\nfunction _updateContainer<C extends Container<TripleToken | BlankNodePropertyToken>>( container:C, propertyToken:PropertyToken ):C {\n\tcontainer.targetToken.properties.push( propertyToken );\n\treturn container;\n}\n\n/**\n * Function that creates a generic {@link PropertyBuilder.has} function.\n * This function is used for create {@link PropertyBuilder} and {@link PropertyBuilderMore}\n *\n * @param genericFactory The factory of the generic expected to be returned.\n * @param container The container that is bound to the PropertyBuilder methods.\n *\n * @private\n */\nfunction getHasFn<T extends object, C extends Container<TripleToken | BlankNodePropertyToken>>( genericFactory:Factory<C, T>, container:C ):PropertyBuilder<T>[ \"has\" ] {\n\treturn ( property:string | Variable | Resource, objects:Objects | Objects[] ) => {\n\t\tconst verbToken:VariableOrIRIToken | \"a\" = (typeof property === \"string\")\n\t\t\t? _resolvePath( container, property )\n\t\t\t: property.getSubject();\n\n\t\tconst propertyToken:PropertyToken = new PropertyToken( verbToken );\n\n\t\tobjects = Array.isArray( objects ) ? objects : [ objects ];\n\t\tpropertyToken.addObject( ...objects.map( convertValue ) );\n\n\t\tconst newContainer = container.targetToken.token === \"subject\" ?\n\t\t\t_cloneContainer( container, propertyToken ) :\n\t\t\t_updateContainer( container, propertyToken );\n\n\t\tconst genericObject:T = genericFactory( newContainer, {} );\n\t\treturn PropertyBuilderMore.createFrom( genericFactory, newContainer, genericObject );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link PropertyBuilder} objects.\n */\nexport const PropertyBuilder:{\n\t/**\n\t * Factory function that allows to crete a {@link PropertyBuilder}\n\t * from the {@param object} provided.\n\t *\n\t * @param genericFactory The factory of the generic expected to\n\t * be returned by the {@link PropertyBuilder.has} method.\n\t * @param container The related container with the data for the\n\t * {@link PropertyBuilder} statement.\n\t * @param object The base base from where to create the\n\t * {@link PropertyBuilder} statement.\n\t *\n\t * @return The {@link PropertyBuilder} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<T extends object, C extends Container<TripleToken | BlankNodePropertyToken>, O extends object>( genericFactory:Factory<C, T>, container:C, object:O ):O & PropertyBuilder<T>;\n} = {\n\tcreateFrom<T extends object, C extends Container<TripleToken | BlankNodePropertyToken>, O extends object>( genericFactory:Factory<C, T>, container:C, object:O ):O & PropertyBuilder<T> {\n\t\treturn Object.assign( object, {\n\t\t\thas: getHasFn( genericFactory, container ),\n\t\t} );\n\t}\n};\n\n/**\n * Constant with the utils for {@link PropertyBuilderMore} objects.\n */\nexport const PropertyBuilderMore:{\n\t/**\n\t * Factory function that allows to crete a {@link PropertyBuilderMore}\n\t * from the {@param object} provided.\n\t *\n\t * @param genericFactory The factory of the generic expected to\n\t * be returned by the {@link PropertyBuilderMore.and} method.\n\t * @param container The related container with the data for the\n\t * {@link PropertyBuilderMore} statement.\n\t * @param object The base base from where to create the\n\t * {@link PropertyBuilderMore} statement.\n\t *\n\t * @return The {@link PropertyBuilderMore} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<T extends object, C extends Container<TripleToken | BlankNodePropertyToken>, O extends object>( genericFactory:Factory<C, T>, container:C, object:O ):O & PropertyBuilderMore<T>;\n} = {\n\tcreateFrom<T extends object, C extends Container<TripleToken | BlankNodePropertyToken>, O extends object>( genericFactory:Factory<C, T>, container:C, object:O ):O & PropertyBuilderMore<T> {\n\t\treturn Object.assign( object, {\n\t\t\tand: getHasFn( genericFactory, container ),\n\t\t} );\n\t}\n};"]}