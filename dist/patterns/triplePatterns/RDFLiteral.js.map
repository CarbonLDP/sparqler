{"version":3,"sources":["patterns/triplePatterns/RDFLiteral.ts"],"names":[],"mappings":";;AACA,0CAAgD;AAEhD,4DAA2D;AAI3D,uCAAsC;AAGtC,iDAAgD;AA2BhD,SAAS,aAAa,CAAsD,SAAW;IACtF,OAAO,UAAA,IAAI;QACV,IAAI,IAAI,IAAI,SAAG;YAAG,IAAI,GAAG,SAAG,CAAE,IAAwB,CAAE,CAAC;QAEzD,IAAM,OAAO,GAAG,SAAS,CAAC,WAAW,CAAC,OAAO,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;QAC5D,IAAM,OAAO,GAAG,oBAAY,CAAE,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAE,CAAC;QAEjF,IAAM,WAAW,GAAG,oBAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,OAAO,SAAA,EAAE,CAAE,CAAC;QACvE,IAAM,YAAY,GAAK,oBAAY,CAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAgB,CAAE,CAAC;QAEhF,OAAO,6BAAa,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IACrD,CAAC,CAAA;AACF,CAAC;AAED,SAAS,iBAAiB,CAAsD,SAAW;IAC1F,OAAO,UAAA,QAAQ;QACd,IAAM,SAAS,GAAG,IAAI,6BAAa,CAAE,QAAQ,CAAE,CAAC;QAChD,IAAM,OAAO,GAAG,oBAAY,CAAE,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAE,CAAC;QAEvF,IAAM,WAAW,GAAG,oBAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,OAAO,SAAA,EAAE,CAAE,CAAC;QACvE,IAAM,YAAY,GAAK,oBAAY,CAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAgB,CAAE,CAAC;QAEhF,OAAO,6BAAa,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IACrD,CAAC,CAAA;AACF,CAAC;AAMY,QAAA,UAAU,GAcnB;IACH,UAAU,EAAV,UAAkF,SAAW,EAAE,MAAQ;QACtG,OAAO,6BAAa,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAClE,QAAQ,EAAE,aAAa,CAAE,SAAS,CAAE;YACpC,YAAY,EAAE,iBAAiB,CAAE,SAAS,CAAE;SAC5C,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"RDFLiteral.js","sourcesContent":["import { Container } from \"../../data/Container\";\nimport { cloneElement } from \"../../data/utils\";\n\nimport { LanguageToken } from \"../../tokens/LanguageToken\";\nimport { RDFLiteralToken } from \"../../tokens/RDFLiteralToken\";\nimport { SubjectToken } from \"../../tokens/SubjectToken\";\n\nimport { XSD } from \"../../utils/XSD\";\n\nimport { Literal } from \"./Literal\";\nimport { TripleSubject } from \"./TripleSubject\";\n\n\n/**\n * Wrapper for easier usage of SPARQL RDLiterals as objects and for\n * declaring triple patterns as its subject.\n */\nexport interface RDFLiteral extends Literal {\n\t/**\n\t * Add an specific type to the RDFLiteral.\n\t *\n\t * Relative types of the XMLSchema ({@link https://www.w3.org/2001/XMLSchema-datatypes})\n\t * can be provided and resolved internally.\n\t *\n\t * @param type The IRI type to be added.\n\t */\n\twithType( type:string ):Literal;\n\n\t/**\n\t * Add an specific language tag to the RDFLiteral.\n\t *\n\t * @param language The language tag to be added.\n\t */\n\twithLanguage( language:string ):Literal;\n}\n\n\nfunction getWithTypeFn<C extends Container<SubjectToken<RDFLiteralToken>>>( container:C ):RDFLiteral[ \"withType\" ] {\n\treturn type => {\n\t\tif( type in XSD ) type = XSD[ type as keyof typeof XSD ];\n\n\t\tconst iriType = container.iriResolver.resolve( type, true );\n\t\tconst subject = cloneElement( container.targetToken.subject, { type: iriType } );\n\n\t\tconst targetToken = cloneElement( container.targetToken, { subject } );\n\t\tconst newContainer:C = cloneElement( container, { targetToken } as Partial<C> );\n\n\t\treturn TripleSubject.createFrom( newContainer, {} );\n\t}\n}\n\nfunction getWithLanguageFn<C extends Container<SubjectToken<RDFLiteralToken>>>( container:C ):RDFLiteral[ \"withLanguage\" ] {\n\treturn language => {\n\t\tconst langToken = new LanguageToken( language );\n\t\tconst subject = cloneElement( container.targetToken.subject, { language: langToken } );\n\n\t\tconst targetToken = cloneElement( container.targetToken, { subject } );\n\t\tconst newContainer:C = cloneElement( container, { targetToken } as Partial<C> );\n\n\t\treturn TripleSubject.createFrom( newContainer, {} );\n\t}\n}\n\n\n/**\n * Constant with utils for {@link RDFLiteral} objects.\n */\nexport const RDFLiteral:{\n\t/**\n\t * Factory function that allows to crete a {@link TripleSubject}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link TripleSubject} statement.\n\t * @param object The base base from where to create the\n\t * {@link TripleSubject} statement.\n\t *\n\t * @return The {@link TripleSubject} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<SubjectToken<RDFLiteralToken>>, O extends object>( container:C, object:O ):O & RDFLiteral;\n} = {\n\tcreateFrom<C extends Container<SubjectToken<RDFLiteralToken>>, O extends object>( container:C, object:O ):O & RDFLiteral {\n\t\treturn TripleSubject.createFrom( container, Object.assign( object, {\n\t\t\twithType: getWithTypeFn( container ),\n\t\t\twithLanguage: getWithLanguageFn( container ),\n\t\t} ) );\n\t},\n};\n"]}