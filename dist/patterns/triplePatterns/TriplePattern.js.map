{"version":3,"sources":["patterns/triplePatterns/TriplePattern.ts"],"names":[],"mappings":";;AAKA,sCAAqC;AAYxB,QAAA,aAAa,GActB;IACH,UAAU,EAAE,iBAAO,CAAC,UAAU;CAC9B,CAAC","file":"TriplePattern.js","sourcesContent":["import { Container } from \"../../data/Container\";\n\nimport { ObjectToken } from \"../../tokens/ObjectToken\";\nimport { TripleToken } from \"../../tokens/TripleToken\";\n\nimport { Pattern } from \"../Pattern\";\n\n\n/**\n * Object that contains a pattern made from a triple subject.\n */\nexport interface TriplePattern<T extends ObjectToken = ObjectToken> extends Pattern<TripleToken<T>> {}\n\n\n/**\n * Constant with utils for {@link TriplePattern} objects.\n */\nexport const TriplePattern:{\n\t/**\n\t * Factory function that allows to crete a {@link TriplePattern}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link TriplePattern} statement.\n\t * @param object The base base from where to create the\n\t * {@link TriplePattern} statement.\n\t *\n\t * @return The {@link TriplePattern} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<T extends ObjectToken, C extends Container<TripleToken<T>>, O extends object>( container:C, object:O ):O & TriplePattern<T>;\n} = {\n\tcreateFrom: Pattern.createFrom,\n};\n"]}