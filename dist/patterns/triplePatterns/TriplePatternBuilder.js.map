{"version":3,"sources":["patterns/triplePatterns/TriplePatternBuilder.ts"],"names":[],"mappings":"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","file":"TriplePatternBuilder.js","sourcesContent":["import { Container2 } from \"../../data/Container2\";\nimport { Factory } from \"../../data/Factory\";\n\nimport { BlankNodePropretyToken } from \"../../tokens/BlankNodePropretyToken\";\nimport { BlankNodeToken } from \"../../tokens/BlankNodeToken\";\nimport { CollectionToken } from \"../../tokens/CollectionToken\";\nimport { IRIToken } from \"../../tokens/IRIToken\";\nimport { LiteralToken } from \"../../tokens/LiteralToken\";\nimport { ObjectToken } from \"../../tokens/ObjectToken\";\nimport { PrefixedNameToken } from \"../../tokens/PrefixedNameToken\";\nimport { SubjectToken } from \"../../tokens/SubjectToken\";\nimport { TokenNode } from \"../../tokens/TokenNode\";\nimport { TripleToken } from \"../../tokens/TripleToken\";\nimport { VariableToken } from \"../../tokens/VariableToken\";\n\nimport { Pattern } from \"../Pattern\";\nimport { SupportedNativeTypes } from \"../SupportedNativeTypes\";\nimport { convertValue } from \"../utils\";\nimport { BlankNode } from \"./BlankNode\";\nimport { BlankNodeBuilder } from \"./BlankNodeBuilder\";\nimport { BlankNodeProperty } from \"./BlankNodeProperty\";\nimport { Collection } from \"./Collection\";\nimport { Literal } from \"./Literal\";\nimport { RDFLiteral } from \"./RDFLiteral\";\nimport { Resource } from \"./Resource\";\nimport { TriplePatternHas } from \"./TriplePatternHas\";\nimport { Variable } from \"./Variable\";\n\n\n/**\n * @todo\n */\nexport interface TriplePatternBuilder {\n\tresource( iri:string ):Resource;\n\n\tblankNode( label?:string ):BlankNode;\n\n\tvar( name:string ):Variable;\n\n\tliteral( value:string ):RDFLiteral;\n\tliteral( value:number | boolean ):Literal;\n\n\tcollection( ...values:(SupportedNativeTypes | Resource | BlankNode | Variable | Literal | Collection | BlankNodeProperty)[] ):Collection;\n\n\tblankNodeProperty( builderFn:( blankNodeBuilder:BlankNodeBuilder ) => any ):BlankNodeProperty;\n}\n\n\nfunction _getPatternContainer<T extends ObjectToken>( container:Container2<TokenNode>, token:T ):Container2<TripleToken<T>> {\n\treturn new Container2( {\n\t\tiriResolver: container.iriResolver,\n\t\ttargetToken: new SubjectToken( token ),\n\t} );\n}\n\nfunction _getPattern<C extends Container2<TokenNode>, T extends ObjectToken>( container:C, token:T ):TriplePatternHas<T> {\n\tconst patternContainer = _getPatternContainer( container, token );\n\treturn TriplePatternHas.createFrom( patternContainer, {} );\n}\n\nfunction _getReadyPattern<C extends Container2<TokenNode>, T extends ObjectToken>( container:C, token:T ):TriplePatternHas<T> & Pattern<TripleToken<T>> {\n\tconst patternContainer = _getPatternContainer( container, token );\n\treturn Factory.createFrom<typeof patternContainer, TriplePatternHas<T>, Pattern<TripleToken<T>>>(\n\t\tTriplePatternHas.createFrom,\n\t\tPattern.createFrom,\n\t)( patternContainer, {} );\n}\n\nfunction getResourceFn<C extends Container2<TokenNode>>( container:C ):TriplePatternBuilder[ \"resource\" ] {\n\treturn iri => {\n\t\tconst token:IRIToken | PrefixedNameToken = container.iriResolver.resolve( iri );\n\t\treturn _getPattern( container, token );\n\t}\n}\n\nfunction getBlankNodeFn<C extends Container2<TokenNode>>( container:C ):TriplePatternBuilder[ \"blankNode\" ] {\n\treturn ( label?:string ) => {\n\t\tif( label && ! label.startsWith( \"_:\" ) )\n\t\t\tlabel = \"_:\" + label;\n\n\t\tconst token:BlankNodeToken = new BlankNodeToken( label );\n\t\treturn _getPattern( container, token );\n\t}\n}\n\nfunction getVarFn<C extends Container2<TokenNode>>( container:C ):TriplePatternBuilder[ \"var\" ] {\n\treturn name => {\n\t\tconst token:VariableToken = new VariableToken( name );\n\t\treturn _getPattern( container, token );\n\t}\n}\n\nfunction getLiteralFn<C extends Container2<TokenNode>>( container:C ):TriplePatternBuilder[ \"literal\" ] {\n\treturn ( value:string | number | boolean ):any => {\n\t\tconst token:LiteralToken = new LiteralToken( value );\n\n\t\tif( typeof value !== \"string\" )\n\t\t\treturn _getPattern( container, token ) as Literal;\n\n\t\tconst patternContainer = _getPatternContainer( container, token );\n\t\treturn RDFLiteral.createFrom( patternContainer, {} );\n\t}\n}\n\n\ntype Values = SupportedNativeTypes | Resource | BlankNode | Variable | Literal | Collection | BlankNodeProperty;\n\nfunction getCollectionFn<C extends Container2<TokenNode>>( container:C ):TriplePatternBuilder[ \"collection\" ] {\n\treturn ( ...values:Values[] ) => {\n\t\tconst token:CollectionToken = new CollectionToken()\n\t\t\t.addObject( ...values.map( convertValue ) );\n\t\treturn _getReadyPattern( container, token );\n\t}\n}\n\nfunction getBlankNodePropertyFn<C extends Container2<TokenNode>>( container:C ):TriplePatternBuilder[ \"blankNodeProperty\" ] {\n\treturn ( builderFn:( blankNodeBuilder:BlankNodeBuilder ) => any ) => {\n\t\tconst token:BlankNodePropretyToken = new BlankNodePropretyToken();\n\n\t\tconst newContainer:Container2<BlankNodePropretyToken> = new Container2( {\n\t\t\tiriResolver: container.iriResolver,\n\t\t\ttargetToken: token,\n\t\t} );\n\n\t\tconst builder:BlankNodeBuilder = BlankNodeBuilder.createFrom( newContainer, {} );\n\t\tbuilderFn( builder );\n\n\t\tif( token.properties.length < 1 )\n\t\t\tthrow new Error( \"At least one property must be specified with the provided BlankNodeBuilder.\" );\n\n\t\treturn _getReadyPattern( container, token );\n\t}\n}\n\n\n/**\n * @todo\n */\nexport const TriplePatternBuilder = {\n\tcreateFrom<C extends Container2<TokenNode>, O extends object>( container:C, object:O ):O & TriplePatternBuilder {\n\t\treturn Object.assign( object, {\n\t\t\tresource: getResourceFn( container ),\n\t\t\tblankNode: getBlankNodeFn( container ),\n\t\t\tvar: getVarFn( container ),\n\t\t\tliteral: getLiteralFn( container ),\n\t\t\tcollection: getCollectionFn( container ),\n\t\t\tblankNodeProperty: getBlankNodePropertyFn( container ),\n\t\t} );\n\t},\n};\n"]}