{"version":3,"sources":["patterns/triplePatterns/TriplePatternsBuilder.ts"],"names":[],"mappings":"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","file":"TriplePatternsBuilder.js","sourcesContent":["import { Container } from \"../../data/Container\";\nimport { Factory } from \"../../data/Factory\";\n\nimport { BlankNodePropertyToken } from \"../../tokens/BlankNodePropertyToken\";\nimport { BlankNodeToken } from \"../../tokens/BlankNodeToken\";\nimport { CollectionToken } from \"../../tokens/CollectionToken\";\nimport { IRIToken } from \"../../tokens/IRIToken\";\nimport { LiteralToken } from \"../../tokens/LiteralToken\";\nimport { ObjectToken } from \"../../tokens/ObjectToken\";\nimport { PrefixedNameToken } from \"../../tokens/PrefixedNameToken\";\nimport { SubjectToken } from \"../../tokens/SubjectToken\";\nimport { TripleToken } from \"../../tokens/TripleToken\";\nimport { VariableToken } from \"../../tokens/VariableToken\";\n\nimport { Pattern } from \"../Pattern\";\nimport { SupportedNativeTypes } from \"../SupportedNativeTypes\";\nimport { convertValue } from \"../utils\";\nimport { BlankNode } from \"./BlankNode\";\nimport { BlankNodeBuilder } from \"./BlankNodeBuilder\";\nimport { BlankNodeProperty } from \"./BlankNodeProperty\";\nimport { Collection } from \"./Collection\";\nimport { Literal } from \"./Literal\";\nimport { RDFLiteral } from \"./RDFLiteral\";\nimport { Resource } from \"./Resource\";\nimport { TripleSubject } from \"./TripleSubject\";\nimport { Variable } from \"./Variable\";\n\n\n/**\n * Builder for triples based elements.\n */\nexport interface TriplePatternsBuilder {\n\t/**\n\t * Create a {@link Resource} from the IRI or prefixed name\n\t * specified.\n\t * @param iri The IRI or prefixed name to create the\n\t * {@link Resource} from.\n\t */\n\tresource( iri:string ):Resource;\n\n\t/**\n\t * Crete a {@link Variable} from the name specified.\n\t * @param name The name of the {@link Variable} to be created.\n\t */\n\tvar( name:string ):Variable;\n\n\t/**\n\t * Create a {@link RDFLiteral} from the string specified.\n\t * @param value The string value of the {@link RDFLiteral}.\n\t */\n\tliteral( value:string ):RDFLiteral;\n\t/**\n\t * Create a {@link Literal} from the value specified.\n\t * @param value The value of the {@link Literal}.\n\t */\n\tliteral( value:string | number | boolean ):Literal;\n\n\t/**\n\t * Create a {@link Collection} from all the values provided.\n\t * @param values The values to be added to the collection.\n\t */\n\tcollection( ...values:(SupportedNativeTypes | Resource | BlankNode | Variable | Literal | Collection | BlankNodeProperty)[] ):Collection;\n\n\t/**\n\t * Create a {@link BlankNode} reference from the label specified.\n\t * @param label The optional label of the {@link BlankNode} to be\n\t * created.\n\t */\n\tblankNode( label?:string ):BlankNode;\n\t/**\n\t * Create a {@link BlankNodeProperty} from the properties\n\t * added in the `selfBuilder` of the {@param builderFn} specified.\n\t * @param builderFn The function that will receive a `selfBuilder`\n\t * parameter to add the properties of the blank node to match.\n\t * This builder as s similar API of a triple pattern, i.e. the\n\t * `has` and `and` methods.\n\t */\n\tblankNode( builderFn:( selfBuilder:BlankNodeBuilder ) => any ):BlankNodeProperty;\n}\n\n\nfunction _getPatternContainer<T extends ObjectToken>( container:Container<undefined>, token:T ):Container<TripleToken<T>> {\n\treturn new Container( {\n\t\tiriResolver: container.iriResolver,\n\t\ttargetToken: new SubjectToken( token ),\n\t} );\n}\n\nfunction _getTripleSubject<T extends ObjectToken>( container:Container<undefined>, token:T ):TripleSubject<T> {\n\tconst patternContainer = _getPatternContainer( container, token );\n\treturn TripleSubject.createFrom( patternContainer, {} );\n}\n\nfunction _getNodeSubject<T extends ObjectToken>( container:Container<undefined>, token:T ):TripleSubject<T> & Pattern<TripleToken<T>> {\n\tconst patternContainer = _getPatternContainer( container, token );\n\treturn Factory.createFrom<typeof patternContainer, TripleSubject<T>, Pattern<TripleToken<T>>>(\n\t\tTripleSubject.createFrom,\n\t\tPattern.createFrom,\n\t)( patternContainer, {} );\n}\n\n\nfunction getResourceFn( container:Container<undefined> ):TriplePatternsBuilder[ \"resource\" ] {\n\treturn iri => {\n\t\tconst token:IRIToken | PrefixedNameToken = container.iriResolver.resolve( iri );\n\t\treturn _getTripleSubject( container, token );\n\t}\n}\n\nfunction getVarFn( container:Container<undefined> ):TriplePatternsBuilder[ \"var\" ] {\n\treturn name => {\n\t\tconst token:VariableToken = new VariableToken( name );\n\t\treturn _getTripleSubject( container, token );\n\t}\n}\n\nfunction getLiteralFn( container:Container<undefined> ):TriplePatternsBuilder[ \"literal\" ] {\n\treturn ( value:string | number | boolean ):any => {\n\t\tconst token:LiteralToken = new LiteralToken( value );\n\n\t\tif( typeof value !== \"string\" )\n\t\t\treturn _getTripleSubject( container, token ) as Literal;\n\n\t\tconst patternContainer = _getPatternContainer( container, token );\n\t\treturn RDFLiteral.createFrom( patternContainer, {} );\n\t}\n}\n\n\ntype Values = SupportedNativeTypes | Resource | BlankNode | Variable | Literal | Collection | BlankNodeProperty;\n\nfunction getCollectionFn( container:Container<undefined> ):TriplePatternsBuilder[ \"collection\" ] {\n\treturn ( ...values:Values[] ) => {\n\t\tconst token:CollectionToken = new CollectionToken()\n\t\t\t.addObject( ...values.map( convertValue ) );\n\t\treturn _getNodeSubject( container, token );\n\t}\n}\n\nfunction _getBlankNode( container:Container<undefined>, label?:string ):BlankNode {\n\tif( label && ! label.startsWith( \"_:\" ) )\n\t\tlabel = \"_:\" + label;\n\n\tconst token:BlankNodeToken = new BlankNodeToken( label );\n\treturn _getTripleSubject( container, token );\n}\n\nfunction _getBlankNodeProperty( container:Container<undefined>, builderFn:( selfBuilder:BlankNodeBuilder ) => any ):BlankNodeProperty {\n\tconst token:BlankNodePropertyToken = new BlankNodePropertyToken();\n\n\tconst builderContainer:Container<BlankNodePropertyToken> = new Container( {\n\t\tiriResolver: container.iriResolver,\n\t\ttargetToken: token,\n\t} );\n\n\tconst builder:BlankNodeBuilder = BlankNodeBuilder.createFrom( builderContainer, {} );\n\tbuilderFn( builder );\n\n\tif( token.properties.length < 1 )\n\t\tthrow new Error( \"At least one property must be specified by the self builder.\" );\n\n\treturn _getNodeSubject( container, token );\n}\n\nfunction getBlankNodeFn( container:Container<undefined> ):TriplePatternsBuilder[ \"blankNode\" ] {\n\treturn ( labelOrBuilderFn?:string | (( selfBuilder:BlankNodeBuilder ) => any) ):any => {\n\t\tif( typeof labelOrBuilderFn === \"function\" )\n\t\t\treturn _getBlankNodeProperty( container, labelOrBuilderFn );\n\n\t\treturn _getBlankNode( container, labelOrBuilderFn );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link TriplePatternsBuilder} objects.\n */\nexport const TriplePatternsBuilder:{\n\t/**\n\t * Factory function that allows to crete a {@link TriplePatternsBuilder}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link TriplePatternsBuilder} statement.\n\t * @param object The base base from where to create the\n\t * {@link TriplePatternsBuilder} statement.\n\t *\n\t * @return The {@link TriplePatternsBuilder} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<O extends object>( container:Container<undefined>, object:O ):O & TriplePatternsBuilder;\n} = {\n\tcreateFrom<O extends object>( container:Container<undefined>, object:O ):O & TriplePatternsBuilder {\n\t\treturn Object.assign( object, {\n\t\t\tresource: getResourceFn( container ),\n\t\t\tvar: getVarFn( container ),\n\t\t\tliteral: getLiteralFn( container ),\n\t\t\tcollection: getCollectionFn( container ),\n\t\t\tblankNode: getBlankNodeFn( container ),\n\t\t} );\n\t},\n};\n"]}