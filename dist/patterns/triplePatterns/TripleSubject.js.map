{"version":3,"sources":["patterns/triplePatterns/TripleSubject.ts"],"names":[],"mappings":";;AAMA,qDAAoD;AACpD,iDAAgD;AAkBnC,QAAA,aAAa,GActB;IACH,UAAU,EAAV,UAA0F,SAAW,EAAE,MAAQ;QAC9G,IAAM,oBAAoB,GAAgC,6BAAa,CAAC,UAAU,CAAC;QACnF,OAAO,iCAAe,CAAC,UAAU,CAAE,oBAAoB,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC1F,UAAU,EAAE,cAAM,OAAA,SAAS,CAAC,WAAW,CAAC,OAAO,EAA7B,CAA6B;SAC/C,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"TripleSubject.js","sourcesContent":["import { Container } from \"../../data/Container\";\nimport { Factory } from \"../../data/Factory\";\n\nimport { ObjectToken } from \"../../tokens/ObjectToken\";\nimport { TripleToken } from \"../../tokens/TripleToken\";\n\nimport { PropertyBuilder } from \"./PropertyBuilder\";\nimport { TriplePattern } from \"./TriplePattern\";\n\n\n/**\n * Object that contains a specific triple subject and allows to\n * create patterns for it.\n */\nexport interface TripleSubject<T extends ObjectToken> extends PropertyBuilder<TriplePattern<T>> {\n\t/**\n\t * Return the subject token of the triple.\n\t */\n\tgetSubject():T;\n}\n\n\n/**\n * Constant with the utils for {@link TripleSubject} objects.\n */\nexport const TripleSubject:{\n\t/**\n\t * Factory function that allows to crete a {@link TripleSubject}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link TripleSubject} statement.\n\t * @param object The base base from where to create the\n\t * {@link TripleSubject} statement.\n\t *\n\t * @return The {@link TripleSubject} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<T extends ObjectToken, C extends Container<TripleToken<T>>, O extends object>( container:C, object:O ):O & TripleSubject<T>;\n} = {\n\tcreateFrom<T extends ObjectToken, C extends Container<TripleToken<T>>, O extends object>( container:C, object:O ):O & TripleSubject<T> {\n\t\tconst triplePatternFactory:Factory<C, TriplePattern<T>> = TriplePattern.createFrom;\n\t\treturn PropertyBuilder.createFrom( triplePatternFactory, container, Object.assign( object, {\n\t\t\tgetSubject: () => container.targetToken.subject,\n\t\t} ) );\n\t}\n};\n"]}