{"version":3,"sources":["patterns/triples/Literals.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,mDAIkC;AAClC,0CAGyB;AACzB,8DAAuD;AACvD,mDAAkD;AAElD;IAAsC,2BAAc;IAInD,iBAAa,QAAoB,EAAE,KAA+B;QAAlE,YACC,kBAAO,QAAQ,CAAE,SAEjB;QADA,KAAI,CAAC,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;;IACzB,CAAC;IAEF,cAAC;AAAD,CATA,AASC,CATqC,+BAAc,GASnD;AATqB,0BAAO;AAW7B;IAAgC,8BAAO;IAItC,oBAAa,QAAoB,EAAE,KAAY;QAA/C,YACC,kBAAO,QAAQ,EAAE,KAAK,CAAE,SAExB;QADA,KAAI,CAAC,aAAa,GAAG,CAAE,mBAAU,EAAE,IAAI,sBAAa,CAAE,KAAK,CAAE,EAAE,oBAAW,CAAE,CAAC;;IAC9E,CAAC;IAED,2BAAM,GAAN,UAAQ,IAAW;QAClB,IAAI,CAAC,aAAa,GAAG,uBAAO,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAE,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAAA,CAAC;IAEF,iCAAY,GAAZ,UAAc,QAAe;QAC5B,IAAI,CAAC,aAAa,GAAG,CAAE,mBAAU,EAAE,IAAI,sBAAa,CAAE,IAAI,CAAC,KAAK,CAAE,EAAE,oBAAW,EAAE,oBAAW,EAAE,IAAI,sBAAa,CAAE,QAAQ,CAAE,CAAE,CAAC;QAC9H,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAAA,CAAC;IAEH,iBAAC;AAAD,CAnBA,AAmBC,CAnB+B,OAAO,GAmBtC;AAnBY,gCAAU;AAqBvB;IAAoC,kCAAO;IAI1C,wBAAa,QAAoB,EAAE,KAAY;QAA/C,YACC,kBAAO,QAAQ,EAAE,KAAK,CAAE,SAIxB;QAFA,IAAI,IAAI,GAAU,MAAM,CAAC,SAAS,CAAE,KAAK,CAAE,GAAG,SAAS,GAAG,OAAO,CAAC;QAClE,KAAI,CAAC,aAAa,GAAG,uBAAO,CAAE,KAAI,CAAC,KAAK,EAAE,IAAI,CAAE,CAAC;;IAClD,CAAC;IAEF,qBAAC;AAAD,CAXA,AAWC,CAXmC,OAAO,GAW1C;AAXY,wCAAc;AAa3B;IAAoC,kCAAO;IAI1C,wBAAa,QAAoB,EAAE,KAAa;QAAhD,YACC,kBAAO,QAAQ,EAAE,KAAK,CAAE,SAExB;QADA,KAAI,CAAC,aAAa,GAAG,uBAAO,CAAE,KAAI,CAAC,KAAK,EAAE,SAAS,CAAE,CAAC;;IACvD,CAAC;IAEF,qBAAC;AAAD,CATA,AASC,CATmC,OAAO,GAS1C;AATY,wCAAc","file":"Literals.js","sourcesContent":["import { IRIResolver } from \"sparqler/iri/IRIResolver\";\nimport {\n\tCLOSE_QUOTE,\n\tLANG_SYMBOL,\n\tOPEN_QUOTE,\n} from \"sparqler/patterns/tokens\";\nimport {\n\tStringLiteral,\n\tToken,\n} from \"sparqler/tokens\";\nimport { addType } from \"sparqler/utils/ObjectPattern\";\nimport { TriplesSubject } from \"./TriplesSubject\";\n\nexport abstract class Literal extends TriplesSubject {\n\n\tprotected value:string;\n\n\tconstructor( resolver:IRIResolver, value:string | number | boolean ) {\n\t\tsuper( resolver );\n\t\tthis.value = value + \"\";\n\t}\n\n}\n\nexport class RDFLiteral extends Literal {\n\n\tprotected elementTokens:Token[];\n\n\tconstructor( resolver:IRIResolver, value:string ) {\n\t\tsuper( resolver, value );\n\t\tthis.elementTokens = [ OPEN_QUOTE, new StringLiteral( value ), CLOSE_QUOTE ];\n\t}\n\n\tofType( type:string ):Literal {\n\t\tthis.elementTokens = addType( this.value, type );\n\t\treturn this;\n\t};\n\n\twithLanguage( language:string ):Literal {\n\t\tthis.elementTokens = [ OPEN_QUOTE, new StringLiteral( this.value ), CLOSE_QUOTE, LANG_SYMBOL, new StringLiteral( language ) ];\n\t\treturn this;\n\t};\n\n}\n\nexport class NumericLiteral extends Literal {\n\n\tprotected elementTokens:Token[];\n\n\tconstructor( resolver:IRIResolver, value:number ) {\n\t\tsuper( resolver, value );\n\n\t\tlet type:string = Number.isInteger( value ) ? \"integer\" : \"float\";\n\t\tthis.elementTokens = addType( this.value, type );\n\t}\n\n}\n\nexport class BooleanLiteral extends Literal {\n\n\tprotected elementTokens:Token[];\n\n\tconstructor( resolver:IRIResolver, value:boolean ) {\n\t\tsuper( resolver, value );\n\t\tthis.elementTokens = addType( this.value, \"boolean\" );\n\t}\n\n}\n"]}