{"version":3,"sources":["patterns/triples/TriplesPattern.ts"],"names":[],"mappings":";;AASA,mDAGkC;AAOlC,8DAAyD;AAEzD;IAYC,wBAAa,QAAoB;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAKD,4BAAG,GAAH,UAAK,QAAqC,EAAE,OAAO;QAClD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAE,QAAQ,EAAE,OAAO,CAAE,CAAC;IAC9C,CAAC;IAED,sCAAa,GAAb;QACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAES,6BAAI,GAAd;QAAA,iBASC;QARA,IAAI,CAAC,UAAU,GAAG;YACjB,UAAU,EAAE;gBACX,GAAG,EAAE,UAAE,QAAQ,EAAE,OAAO;oBACvB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAE,+BAAsB,CAAE,CAAC;oBAClD,MAAM,CAAC,KAAI,CAAC,WAAW,CAAE,QAAQ,EAAE,OAAO,CAAE,CAAC;gBAC9C,CAAC;aACD;SACD,CAAC;IACH,CAAC;IAAA,CAAC;IAEM,oCAAW,GAAnB,UAAqB,QAAqC,EAAE,MAAwC;QACnG,IAAI,MAAM,GAAW,CAAE,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,YAAY,MAAM,CAAE;cAChF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAE,QAAkB,EAAE,IAAI,CAAE;cACjD,QAAQ,CAAC,aAAa,EAAE,CAAC;QAE5B,MAAM,GAAG,KAAK,CAAC,OAAO,CAAE,MAAM,CAAE,GAAG,MAAM,GAAG,CAAE,MAAM,CAAE,CAAC;QACvD,MAAM,CAAC,OAAO,CAAE,UAAE,KAAK,EAAE,KAAK,EAAE,KAAK;YACpC,MAAM,CAAC,IAAI,OAAX,MAAM,EAAU,yBAAS,CAAE,KAAK,CAAE,EAAG;YACrC,EAAE,CAAA,CAAE,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAE,gCAAuB,CAAE,CAAC;QACvE,CAAC,CAAE,CAAC;QAEJ,CAAA,KAAA,IAAI,CAAC,aAAa,CAAA,CAAC,IAAI,WAAK,MAAM,EAAG;QACrC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,CAAE,CAAC;;IACtF,CAAC;IAEF,qBAAC;AAAD,CAxDA,AAwDC,IAAA;AAxDqB,wCAAc;AA0DpC,kBAAe,cAAc,CAAC","file":"TriplesPattern.js","sourcesContent":["import { IRIResolver } from \"sparqler/iri/IRIResolver\";\nimport {\n\tElementPattern,\n\tGraphPattern,\n\tSupportedNativeTypes,\n\tTriplesNodePattern,\n\tTriplesSameSubject,\n\tTriplesSameSubjectMore,\n} from \"sparqler/patterns\";\nimport {\n\tSAME_PROPERTY_SEPARATOR,\n\tSAME_SUBJECT_SEPARATOR,\n} from \"sparqler/patterns/tokens\";\nimport {\n\tLiteral,\n\tResource,\n\tVariable,\n} from \"sparqler/patterns/triples\";\nimport { Token } from \"sparqler/tokens\";\nimport { serialize } from \"sparqler/utils/ObjectPattern\";\n\nexport abstract class TriplesPattern<T extends GraphPattern> implements TriplesSameSubject<T>, ElementPattern {\n\n\tprotected abstract elementTokens:Token[];\n\tprotected patternTokens:Token[];\n\n\tprotected interfaces:{\n\t\taddPattern:TriplesSameSubjectMore<T>;\n\t\tgraphPattern?:T\n\t};\n\n\tprivate resolver:IRIResolver;\n\n\tconstructor( resolver:IRIResolver ) {\n\t\tthis.resolver = resolver;\n\t\tthis.patternTokens = [];\n\t\tthis.init();\n\t}\n\n\n\thas( property:string | Variable | Resource, object:SupportedNativeTypes | Resource | Variable | Literal | TriplesNodePattern ):TriplesSameSubjectMore<T> & T;\n\thas( property:string | Variable | Resource, objects:(SupportedNativeTypes | Resource | Variable | Literal | TriplesNodePattern)[] ):TriplesSameSubjectMore<T> & T;\n\thas( property:string | Variable | Resource, objects ):TriplesSameSubjectMore<T> & T {\n\t\tthis.patternTokens = [];\n\t\treturn this._addPattern( property, objects );\n\t}\n\n\tgetSelfTokens():Token[] {\n\t\treturn this.elementTokens;\n\t}\n\n\tprotected init():void {\n\t\tthis.interfaces = {\n\t\t\taddPattern: {\n\t\t\t\tand: ( property, objects ) => {\n\t\t\t\t\tthis.patternTokens.push( SAME_SUBJECT_SEPARATOR );\n\t\t\t\t\treturn this._addPattern( property, objects );\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t};\n\n\tprivate _addPattern( property:string | Variable | Resource, values:ElementPattern | ElementPattern[] ):TriplesSameSubjectMore<T> & T {\n\t\tlet tokens:Token[] = ( typeof property === \"string\" || property instanceof String )\n\t\t\t? this.resolver.resolve( property as string, true )\n\t\t\t: property.getSelfTokens();\n\n\t\tvalues = Array.isArray( values ) ? values : [ values ];\n\t\tvalues.forEach( ( value, index, array ) => {\n\t\t\ttokens.push( ...serialize( value ) );\n\t\t\tif( index < array.length - 1 ) tokens.push( SAME_PROPERTY_SEPARATOR );\n\t\t} );\n\n\t\tthis.patternTokens.push( ...tokens );\n\t\treturn Object.assign( {}, this.interfaces.addPattern, this.interfaces.graphPattern );\n\t}\n\n}\n\nexport default TriplesPattern;\n"]}