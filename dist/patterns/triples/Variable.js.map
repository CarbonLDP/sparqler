{"version":3,"sources":["patterns/triples/Variable.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,mDAAsD;AACtD,0CAGyB;AACzB,mDAAkD;AAElD,IAAM,SAAS,GAAU,kXAAkX,CAAC;AAE5Y;IAA8B,4BAAc;IAI3C,kBAAa,QAAoB,EAAE,IAAW;QAA9C,iBAKC;QAJA,EAAE,CAAA,CAAE,CAAE,SAAS,CAAC,IAAI,CAAE,IAAI,CAAG,CAAC;YAAC,MAAM,IAAI,KAAK,CAAE,uBAAuB,CAAE,CAAC;QAE1E,QAAA,kBAAO,QAAQ,CAAE,SAAC;QAClB,KAAI,CAAC,aAAa,GAAG,CAAE,mBAAU,EAAE,IAAI,sBAAa,CAAE,IAAI,CAAE,CAAE,CAAC;;IAChE,CAAC;IAEF,eAAC;AAAD,CAXA,AAWC,CAX6B,+BAAc,GAW3C;AAXY,4BAAQ;AAarB,kBAAe,QAAQ,CAAC","file":"Variable.js","sourcesContent":["import { IRIResolver } from \"sparqler/iri/IRIResolver\";\nimport { VAR_SYMBOL } from \"sparqler/patterns/tokens\";\nimport {\n\tStringLiteral,\n\tToken,\n} from \"sparqler/tokens\";\nimport { TriplesSubject } from \"./TriplesSubject\";\n\nconst nameRegex:RegExp = /^((?:[0-9A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF]))((?:[0-9A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF]))*$/;\n\nexport class Variable extends TriplesSubject {\n\n\tprotected elementTokens:Token[];\n\n\tconstructor( resolver:IRIResolver, name:string ) {\n\t\tif( ! nameRegex.test( name ) ) throw new Error( \"Invalid variable name\" );\n\n\t\tsuper( resolver );\n\t\tthis.elementTokens = [ VAR_SYMBOL, new StringLiteral( name ) ];\n\t}\n\n}\n\nexport default Variable;\n"]}