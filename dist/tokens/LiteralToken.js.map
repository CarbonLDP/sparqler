{"version":3,"sources":["tokens/LiteralToken.ts"],"names":[],"mappings":";;AAUA;IAKC,sBAAa,KAA+B;QAJnC,UAAK,GAAa,SAAS,CAAC;QAKpC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAED,+BAAQ,GAAR,UAAU,MAAc;QACvB,OAAO,IAAI,CAAC,SAAS,CAAE,IAAI,CAAC,KAAK,CAAE,CAAC;IACrC,CAAC;IACF,mBAAC;AAAD,CAZA,AAYC,IAAA;AAZY,oCAAY","file":"LiteralToken.js","sourcesContent":["import { TokenNode } from \"./TokenNode\";\n\n\n/**\n * The token of the any literal term.\n *\n * @see {@link https://www.w3.org/TR/sparql11-query/#rRDFLiteral}\n * @see {@link https://www.w3.org/TR/sparql11-query/#rNumericLiteral}\n * @see {@link https://www.w3.org/TR/sparql11-query/#rBooleanLiteral}\n */\nexport class LiteralToken implements TokenNode {\n\treadonly token:\"literal\" = \"literal\";\n\n\treadonly value:boolean | number | string;\n\n\tconstructor( value:boolean | number | string ) {\n\t\tthis.value = value;\n\t}\n\n\ttoString( spaces?:number ):string {\n\t\treturn JSON.stringify( this.value );\n\t}\n}\n"]}