{"version":3,"sources":["tokens/OrderToken.ts"],"names":[],"mappings":";;AASA;IAKC,oBAAa,SAAgC,EAAE,IAAoB;QAJ1D,UAAK,GAAW,OAAO,CAAC;QAKhC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,IAAI;YAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,6BAAQ,GAAR,UAAU,MAAc;QACvB,OAAO,WAAW,GAAG,CAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,CAAC,IAAI,UAAO,IAAI,CAAC,SAAS,OAAK,CAAC,CAAC;YACzC,KAAI,IAAI,CAAC,SAAY,CAAE,CAAC;IAC1B,CAAC;IACF,iBAAC;AAAD,CAfA,AAeC,IAAA;AAfY,gCAAU","file":"OrderToken.js","sourcesContent":["import { TokenNode } from \"./TokenNode\";\nimport { VariableToken } from \"./VariableToken\";\n\n\n/**\n * The token of the `GROUP BY` statement.\n *\n * @see {@link https://www.w3.org/TR/sparql11-query/#rGroupClause}\n */\nexport class OrderToken implements TokenNode {\n\treadonly token:\"order\" = \"order\";\n\treadonly condition:VariableToken | string;\n\treadonly flow?:string;\n\n\tconstructor( condition:VariableToken | string, flow?:\"ASC\" | \"DESC\" ) {\n\t\tthis.condition = condition;\n\t\tif( flow ) this.flow = flow;\n\t}\n\n\ttoString( spaces?:number ):string {\n\t\treturn \"ORDER BY \" + ( this.flow ?\n\t\t\t`${ this.flow }( ${ this.condition } )` :\n\t\t\t`${ this.condition }` );\n\t}\n}\n"]}