{"version":3,"sources":["tokens/WhereToken.ts"],"names":[],"mappings":";;AAAA,yDAAwD;AASxD;IAKC;QAJA,UAAK,GAAW,OAAO,CAAC;QAKvB,IAAI,CAAC,YAAY,GAAG,IAAI,qCAAiB,EAAE,CAAC;IAC7C,CAAC;IAGD,6BAAQ,GAAR,UAAU,MAAc;QACvB,IAAM,UAAU,GAAU,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC5D,OAAO,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;IAC1D,CAAC;IACF,iBAAC;AAAD,CAdA,AAcC,IAAA;AAdY,gCAAU","file":"WhereToken.js","sourcesContent":["import { GroupPatternToken } from \"./GroupPatternToken\";\nimport { TokenNode } from \"./TokenNode\";\n\n\n/**\n * The token for `WHERE` statements.\n *\n * @see {@link https://www.w3.org/TR/sparql11-query/#rWhereClause}\n */\nexport class WhereToken implements TokenNode {\n\ttoken:\"where\" = \"where\";\n\n\treadonly groupPattern:GroupPatternToken;\n\n\tconstructor() {\n\t\tthis.groupPattern = new GroupPatternToken();\n\t}\n\n\n\ttoString( spaces?:number ):string {\n\t\tconst identifier:string = spaces === void 0 ? \"\" : \"WHERE \";\n\t\treturn identifier + this.groupPattern.toString( spaces );\n\t}\n}\n"]}