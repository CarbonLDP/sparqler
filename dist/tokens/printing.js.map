{"version":3,"sources":["tokens/printing.ts"],"names":[],"mappings":";;AAGa,QAAA,kBAAkB,GAAK,CAAC,CAAC;AAGtC,sBAA8B,MAAc;IAC3C,IAAI,MAAM,KAAK,KAAK,CAAC;QAAG,OAAO,GAAG,CAAC;IACnC,OAAO,IAAI,CAAC;AACb,CAAC;AAHD,oCAGC;AAED,wBAAgC,MAAc,EAAE,KAAa;IAC5D,IAAI,CAAE,MAAM;QAAG,OAAO,EAAE,CAAC;IAEzB,IAAI,KAAK;QAAG,MAAM,IAAI,KAAK,CAAC;IAC5B,OAAO,GAAG,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC;AAC7B,CAAC;AALD,wCAKC;AAED,mBAA2B,MAAyB,EAAE,KAAY;IACjE,IAAI,MAAM,KAAK,KAAK,CAAC;QAAG,OAAO,MAAM,CAAC;IACtC,OAAO,MAAM,GAAG,KAAK,CAAC;AACvB,CAAC;AAHD,8BAGC;AAGD,iCAAyC,IAKxC;IACA,IAAI,CAAE,IAAI,CAAC,MAAM,CAAC,MAAM;QAAG,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IACnE,IAAI,SAAS,GAAU,YAAY,CAAE,IAAI,CAAC,MAAM,CAAE,CAAC;IAEnD,IAAM,YAAY,GAAU,SAAS,CAAE,IAAI,CAAC,MAAM,EAAE,0BAAkB,CAAE,CAAC;IACzE,IAAM,eAAe,GAAU,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;IAEnG,IAAM,MAAM,GAAY,IAAI,CAAC,MAAM;SACjC,GAAG,CAAE,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,CAAE,YAAY,CAAE,EAA/B,CAA+B,CAAE,CAAC;IAEnD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,CAAE,MAAM,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAE,IAAI,CAAE;QACxD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAE,CAAC,CAAE,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAEnE,IAAM,MAAM,GAAU,cAAc,CAAE,IAAI,CAAC,MAAM,CAAE,CAAC;IACpD,IAAM,YAAY,GAAU,cAAc,CAAE,YAAY,CAAE,CAAC;IAC3D,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS;QAChC,MAAM;aACJ,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,YAAY,GAAG,CAAC,EAAhB,CAAgB,CAAE;aAC5B,IAAI,CAAE,eAAe,CAAE,GAAG,SAAS;QACrC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3B,CAAC;AAzBD,0DAyBC","file":"printing.js","sourcesContent":["import { TokenNode } from \"./TokenNode\";\n\n\nexport const INDENTATION_SPACES:4 = 4;\n\n\nexport function getSeparator( spaces?:number ) {\n\tif( spaces === void 0 ) return \" \";\n\treturn \"\\n\";\n}\n\nexport function getIndentation( spaces?:number, extra?:number ):string {\n\tif( ! spaces ) return \"\";\n\n\tif( extra ) spaces += extra;\n\treturn \" \".repeat( spaces );\n}\n\nexport function addSpaces( spaces:number | undefined, extra:number ):number | undefined {\n\tif( spaces === void 0 ) return spaces;\n\treturn spaces + extra;\n}\n\n\nexport function getTokenContainerString( data:{\n\tspaces:number | undefined,\n\ttags:{ open:string, close:string },\n\ttokensSeparator?:string;\n\ttokens:TokenNode[],\n} ):string {\n\tif( ! data.tokens.length ) return data.tags.open + data.tags.close;\n\tlet separator:string = getSeparator( data.spaces );\n\n\tconst tokensSpaces:number = addSpaces( data.spaces, INDENTATION_SPACES );\n\tconst tokensSeparator:string = data.tokensSeparator ? data.tokensSeparator + separator : separator;\n\n\tconst tokens:string[] = data.tokens\n\t\t.map( tokens => tokens.toString( tokensSpaces ) );\n\n\tif( tokens.length === 1 && ! tokens[ 0 ].includes( \"\\n\" ) )\n\t\treturn data.tags.open + \" \" + tokens[ 0 ] + \" \" + data.tags.close;\n\n\tconst indent:string = getIndentation( data.spaces );\n\tconst tokensIndent:string = getIndentation( tokensSpaces );\n\treturn data.tags.open + separator +\n\t\ttokens\n\t\t\t.map( x => tokensIndent + x )\n\t\t\t.join( tokensSeparator ) + separator +\n\t\tindent + data.tags.close;\n}\n"]}