{"version":3,"sources":["utils/ObjectPattern.ts"],"names":[],"mappings":";;AAIA,2BAA6B;AAE7B,yDAAwD;AACxD,6CAO4B;AAC5B,6DAA4D;AAG5D,SAAgB,SAAS,CAAE,MAAM;IAEhC,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,YAAY,MAAM,EAAG;QAC5D,IAAI,MAAM,KAAK,+BAAc,CAAC,SAAS;YAAG,OAAO,CAAE,cAAK,CAAE,CAAC;QAC3D,OAAO,CAAE,mBAAU,EAAE,IAAI,6BAAa,CAAE,MAAgB,CAAE,EAAE,oBAAW,CAAE,CAAC;KAC1E;IAED,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,YAAY,MAAM,EAAG;QAC5D,IAAI,MAAM,CAAC,SAAS,CAAE,MAAM,CAAC,OAAO,EAAE,CAAE;YACvC,OAAO,IAAI,CAAC,OAAO,CAAE,MAAM,GAAG,EAAE,EAAE,SAAS,CAAE,CAAC;QAC/C,OAAO,IAAI,CAAC,OAAO,CAAE,MAAM,GAAG,EAAE,EAAE,OAAO,CAAE,CAAC;KAC5C;IAED,IAAI,OAAO,MAAM,KAAK,SAAS,IAAI,MAAM,YAAY,OAAO;QAC3D,OAAO,IAAI,CAAC,OAAO,CAAE,MAAM,GAAG,EAAE,EAAE,SAAS,CAAE,CAAC;IAE/C,IAAI,MAAM,YAAY,IAAI;QACzB,OAAO,IAAI,CAAC,OAAO,CAAE,MAAM,CAAC,WAAW,EAAE,EAAE,UAAU,CAAE,CAAC;IAEzD,OAAO,MAAM,CAAC,aAAa,EAAE,CAAC;AAC/B,CAAC;AApBD,8BAoBC;AAED,SAAgB,OAAO,CAAE,KAAY,EAAE,IAAW;IACjD,IAAI,IAAI,IAAI,GAAG;QAAG,IAAI,GAAG,GAAG,CAAE,IAAI,CAAE,CAAC;IACrC,OAAO,CAAE,mBAAU,EAAE,IAAI,6BAAa,CAAE,KAAK,CAAE,EAAE,oBAAW,EAAE,iBAAQ,EAAE,iBAAQ,EAAE,IAAI,6BAAa,CAAE,IAAI,CAAE,EAAE,kBAAS,CAAE,CAAC;AAC1H,CAAC;AAHD,0BAGC","file":"ObjectPattern.js","sourcesContent":["import {\n\tSupportedNativeTypes,\n\tElementPattern\n} from \"../patterns/interfaces\";\nimport * as XSD from \"./XSD\";\nimport { Token } from \"../tokens/Token\";\nimport { StringLiteral } from \"../tokens/StringLiteral\";\nimport {\n\tOPEN_QUOTE,\n\tCLOSE_QUOTE,\n\tCLOSE_IRI,\n\tOPEN_IRI,\n\tOFF_TYPE,\n\tUNDEF\n} from \"../patterns/tokens\";\nimport { PatternBuilder } from \"../patterns/PatternBuilder\";\n\nexport function serialize( object:SupportedNativeTypes | ElementPattern ):Token[];\nexport function serialize( object ):Token[] {\n\n\tif( typeof object === \"string\" || object instanceof String ) {\n\t\tif( object === PatternBuilder.undefined ) return [ UNDEF ];\n\t\treturn [ OPEN_QUOTE, new StringLiteral( object as string ), CLOSE_QUOTE ];\n\t}\n\n\tif( typeof object === \"number\" || object instanceof Number ) {\n\t\tif( Number.isInteger( object.valueOf() ) )\n\t\t\treturn this.addType( object + \"\", \"integer\" );\n\t\treturn this.addType( object + \"\", \"float\" );\n\t}\n\n\tif( typeof object === \"boolean\" || object instanceof Boolean )\n\t\treturn this.addType( object + \"\", \"boolean\" );\n\n\tif( object instanceof Date )\n\t\treturn this.addType( object.toISOString(), \"dateTime\" );\n\n\treturn object.getSelfTokens();\n}\n\nexport function addType( value:string, type:string ):Token[] {\n\tif( type in XSD ) type = XSD[ type ];\n\treturn [ OPEN_QUOTE, new StringLiteral( value ), CLOSE_QUOTE, OFF_TYPE, OPEN_IRI, new StringLiteral( type ), CLOSE_IRI ];\n}\n"]}